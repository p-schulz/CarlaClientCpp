// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carla_server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "carla_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace carla_server {
class Vector3DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector3D> {
} _Vector3D_default_instance_;
class Rotation3DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Rotation3D> {
} _Rotation3D_default_instance_;
class TransformDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transform> {
} _Transform_default_instance_;
class BoundingBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BoundingBox> {
} _BoundingBox_default_instance_;
class SensorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sensor> {
} _Sensor_default_instance_;
class VehicleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vehicle> {
} _Vehicle_default_instance_;
class PedestrianDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pedestrian> {
} _Pedestrian_default_instance_;
class TrafficLightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight> {
} _TrafficLight_default_instance_;
class SpeedLimitSignDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedLimitSign> {
} _SpeedLimitSign_default_instance_;
class AgentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Agent> {
  public:
  const ::carla_server::Vehicle* vehicle_;
  const ::carla_server::Pedestrian* pedestrian_;
  const ::carla_server::TrafficLight* traffic_light_;
  const ::carla_server::SpeedLimitSign* speed_limit_sign_;
} _Agent_default_instance_;
class RequestNewEpisodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestNewEpisode> {
} _RequestNewEpisode_default_instance_;
class SceneDescriptionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SceneDescription> {
} _SceneDescription_default_instance_;
class EpisodeStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EpisodeStart> {
} _EpisodeStart_default_instance_;
class EpisodeReadyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EpisodeReady> {
} _EpisodeReady_default_instance_;
class ControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control> {
} _Control_default_instance_;
class Measurements_PlayerMeasurementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Measurements_PlayerMeasurements> {
} _Measurements_PlayerMeasurements_default_instance_;
class MeasurementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Measurements> {
} _Measurements_default_instance_;

namespace protobuf_carla_5fserver_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation3D, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation3D, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation3D, roll_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, extent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sensor, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, bounding_box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vehicle, forward_speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, bounding_box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pedestrian, forward_speed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedLimitSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedLimitSign, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedLimitSign, speed_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, id_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Agent_default_instance_), vehicle_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Agent_default_instance_), pedestrian_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Agent_default_instance_), traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Agent_default_instance_), speed_limit_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, agent_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewEpisode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestNewEpisode, ini_file_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneDescription, player_start_spots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneDescription, sensors_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeStart, player_start_spot_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpisodeReady, ready_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, hand_brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, reverse_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, bounding_box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, forward_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, collision_vehicles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, collision_pedestrians_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, collision_other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, intersection_otherlane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, intersection_offroad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements_PlayerMeasurements, autopilot_control_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements, frame_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements, platform_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements, game_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements, player_measurements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measurements, non_player_agents_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Vector3D)},
  { 8, -1, sizeof(Rotation3D)},
  { 16, -1, sizeof(Transform)},
  { 24, -1, sizeof(BoundingBox)},
  { 31, -1, sizeof(Sensor)},
  { 39, -1, sizeof(Vehicle)},
  { 47, -1, sizeof(Pedestrian)},
  { 55, -1, sizeof(TrafficLight)},
  { 62, -1, sizeof(SpeedLimitSign)},
  { 69, -1, sizeof(Agent)},
  { 80, -1, sizeof(RequestNewEpisode)},
  { 86, -1, sizeof(SceneDescription)},
  { 93, -1, sizeof(EpisodeStart)},
  { 99, -1, sizeof(EpisodeReady)},
  { 105, -1, sizeof(Control)},
  { 115, -1, sizeof(Measurements_PlayerMeasurements)},
  { 130, -1, sizeof(Measurements)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rotation3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transform_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoundingBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sensor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vehicle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pedestrian_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedLimitSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Agent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestNewEpisode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneDescription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EpisodeStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EpisodeReady_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Measurements_PlayerMeasurements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Measurements_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "carla_server.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vector3D_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Rotation3D_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Transform_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _BoundingBox_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Sensor_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Vehicle_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Pedestrian_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TrafficLight_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SpeedLimitSign_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Agent_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _RequestNewEpisode_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SceneDescription_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _EpisodeStart_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _EpisodeReady_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Control_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Measurements_PlayerMeasurements_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Measurements_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vector3D_default_instance_.DefaultConstruct();
  _Rotation3D_default_instance_.DefaultConstruct();
  _Transform_default_instance_.DefaultConstruct();
  _BoundingBox_default_instance_.DefaultConstruct();
  _Sensor_default_instance_.DefaultConstruct();
  _Vehicle_default_instance_.DefaultConstruct();
  _Pedestrian_default_instance_.DefaultConstruct();
  _TrafficLight_default_instance_.DefaultConstruct();
  _SpeedLimitSign_default_instance_.DefaultConstruct();
  _Agent_default_instance_.DefaultConstruct();
  _RequestNewEpisode_default_instance_.DefaultConstruct();
  _SceneDescription_default_instance_.DefaultConstruct();
  _EpisodeStart_default_instance_.DefaultConstruct();
  _EpisodeReady_default_instance_.DefaultConstruct();
  _Control_default_instance_.DefaultConstruct();
  _Measurements_PlayerMeasurements_default_instance_.DefaultConstruct();
  _Measurements_default_instance_.DefaultConstruct();
  _Transform_default_instance_.get_mutable()->location_ = const_cast< ::carla_server::Vector3D*>(
      ::carla_server::Vector3D::internal_default_instance());
  _Transform_default_instance_.get_mutable()->orientation_ = const_cast< ::carla_server::Vector3D*>(
      ::carla_server::Vector3D::internal_default_instance());
  _Transform_default_instance_.get_mutable()->rotation_ = const_cast< ::carla_server::Rotation3D*>(
      ::carla_server::Rotation3D::internal_default_instance());
  _BoundingBox_default_instance_.get_mutable()->transform_ = const_cast< ::carla_server::Transform*>(
      ::carla_server::Transform::internal_default_instance());
  _BoundingBox_default_instance_.get_mutable()->extent_ = const_cast< ::carla_server::Vector3D*>(
      ::carla_server::Vector3D::internal_default_instance());
  _Vehicle_default_instance_.get_mutable()->transform_ = const_cast< ::carla_server::Transform*>(
      ::carla_server::Transform::internal_default_instance());
  _Vehicle_default_instance_.get_mutable()->bounding_box_ = const_cast< ::carla_server::BoundingBox*>(
      ::carla_server::BoundingBox::internal_default_instance());
  _Pedestrian_default_instance_.get_mutable()->transform_ = const_cast< ::carla_server::Transform*>(
      ::carla_server::Transform::internal_default_instance());
  _Pedestrian_default_instance_.get_mutable()->bounding_box_ = const_cast< ::carla_server::BoundingBox*>(
      ::carla_server::BoundingBox::internal_default_instance());
  _TrafficLight_default_instance_.get_mutable()->transform_ = const_cast< ::carla_server::Transform*>(
      ::carla_server::Transform::internal_default_instance());
  _SpeedLimitSign_default_instance_.get_mutable()->transform_ = const_cast< ::carla_server::Transform*>(
      ::carla_server::Transform::internal_default_instance());
  _Agent_default_instance_.vehicle_ = const_cast< ::carla_server::Vehicle*>(
      ::carla_server::Vehicle::internal_default_instance());
  _Agent_default_instance_.pedestrian_ = const_cast< ::carla_server::Pedestrian*>(
      ::carla_server::Pedestrian::internal_default_instance());
  _Agent_default_instance_.traffic_light_ = const_cast< ::carla_server::TrafficLight*>(
      ::carla_server::TrafficLight::internal_default_instance());
  _Agent_default_instance_.speed_limit_sign_ = const_cast< ::carla_server::SpeedLimitSign*>(
      ::carla_server::SpeedLimitSign::internal_default_instance());
  _Measurements_PlayerMeasurements_default_instance_.get_mutable()->transform_ = const_cast< ::carla_server::Transform*>(
      ::carla_server::Transform::internal_default_instance());
  _Measurements_PlayerMeasurements_default_instance_.get_mutable()->bounding_box_ = const_cast< ::carla_server::BoundingBox*>(
      ::carla_server::BoundingBox::internal_default_instance());
  _Measurements_PlayerMeasurements_default_instance_.get_mutable()->acceleration_ = const_cast< ::carla_server::Vector3D*>(
      ::carla_server::Vector3D::internal_default_instance());
  _Measurements_PlayerMeasurements_default_instance_.get_mutable()->autopilot_control_ = const_cast< ::carla_server::Control*>(
      ::carla_server::Control::internal_default_instance());
  _Measurements_default_instance_.get_mutable()->player_measurements_ = const_cast< ::carla_server::Measurements_PlayerMeasurements*>(
      ::carla_server::Measurements_PlayerMeasurements::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022carla_server.proto\022\014carla_server\"+\n\010Ve"
      "ctor3D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\""
      "6\n\nRotation3D\022\r\n\005pitch\030\001 \001(\002\022\013\n\003yaw\030\002 \001("
      "\002\022\014\n\004roll\030\003 \001(\002\"\222\001\n\tTransform\022(\n\010locatio"
      "n\030\001 \001(\0132\026.carla_server.Vector3D\022/\n\013orien"
      "tation\030\002 \001(\0132\026.carla_server.Vector3DB\002\030\001"
      "\022*\n\010rotation\030\003 \001(\0132\030.carla_server.Rotati"
      "on3D\"a\n\013BoundingBox\022*\n\ttransform\030\001 \001(\0132\027"
      ".carla_server.Transform\022&\n\006extent\030\002 \001(\0132"
      "\026.carla_server.Vector3D\"\200\001\n\006Sensor\022\n\n\002id"
      "\030\001 \001(\007\022\'\n\004type\030\002 \001(\0162\031.carla_server.Sens"
      "or.Type\022\014\n\004name\030\003 \001(\t\"3\n\004Type\022\013\n\007UNKNOWN"
      "\020\000\022\n\n\006CAMERA\020\001\022\022\n\016LIDAR_RAY_CAST\020\002\"}\n\007Ve"
      "hicle\022*\n\ttransform\030\001 \001(\0132\027.carla_server."
      "Transform\022/\n\014bounding_box\030\004 \001(\0132\031.carla_"
      "server.BoundingBox\022\025\n\rforward_speed\030\003 \001("
      "\002\"\200\001\n\nPedestrian\022*\n\ttransform\030\001 \001(\0132\027.ca"
      "rla_server.Transform\022/\n\014bounding_box\030\004 \001"
      "(\0132\031.carla_server.BoundingBox\022\025\n\rforward"
      "_speed\030\003 \001(\002\"\224\001\n\014TrafficLight\022*\n\ttransfo"
      "rm\030\001 \001(\0132\027.carla_server.Transform\022/\n\005sta"
      "te\030\002 \001(\0162 .carla_server.TrafficLight.Sta"
      "te\"\'\n\005State\022\t\n\005GREEN\020\000\022\n\n\006YELLOW\020\001\022\007\n\003RE"
      "D\020\002\"Q\n\016SpeedLimitSign\022*\n\ttransform\030\001 \001(\013"
      "2\027.carla_server.Transform\022\023\n\013speed_limit"
      "\030\002 \001(\002\"\345\001\n\005Agent\022\n\n\002id\030\001 \001(\007\022(\n\007vehicle\030"
      "\002 \001(\0132\025.carla_server.VehicleH\000\022.\n\npedest"
      "rian\030\003 \001(\0132\030.carla_server.PedestrianH\000\0223"
      "\n\rtraffic_light\030\004 \001(\0132\032.carla_server.Tra"
      "fficLightH\000\0228\n\020speed_limit_sign\030\005 \001(\0132\034."
      "carla_server.SpeedLimitSignH\000B\007\n\005agent\"%"
      "\n\021RequestNewEpisode\022\020\n\010ini_file\030\001 \001(\t\"n\n"
      "\020SceneDescription\0223\n\022player_start_spots\030"
      "\001 \003(\0132\027.carla_server.Transform\022%\n\007sensor"
      "s\030\002 \003(\0132\024.carla_server.Sensor\"/\n\014Episode"
      "Start\022\037\n\027player_start_spot_index\030\001 \001(\r\"\035"
      "\n\014EpisodeReady\022\r\n\005ready\030\001 \001(\010\"^\n\007Control"
      "\022\r\n\005steer\030\001 \001(\002\022\020\n\010throttle\030\002 \001(\002\022\r\n\005bra"
      "ke\030\003 \001(\002\022\022\n\nhand_brake\030\004 \001(\010\022\017\n\007reverse\030"
      "\005 \001(\010\"\321\004\n\014Measurements\022\024\n\014frame_number\030\005"
      " \001(\004\022\032\n\022platform_timestamp\030\001 \001(\r\022\026\n\016game"
      "_timestamp\030\002 \001(\r\022J\n\023player_measurements\030"
      "\003 \001(\0132-.carla_server.Measurements.Player"
      "Measurements\022.\n\021non_player_agents\030\004 \003(\0132"
      "\023.carla_server.Agent\032\372\002\n\022PlayerMeasureme"
      "nts\022*\n\ttransform\030\001 \001(\0132\027.carla_server.Tr"
      "ansform\022/\n\014bounding_box\030\014 \001(\0132\031.carla_se"
      "rver.BoundingBox\022,\n\014acceleration\030\003 \001(\0132\026"
      ".carla_server.Vector3D\022\025\n\rforward_speed\030"
      "\004 \001(\002\022\032\n\022collision_vehicles\030\005 \001(\002\022\035\n\025col"
      "lision_pedestrians\030\006 \001(\002\022\027\n\017collision_ot"
      "her\030\007 \001(\002\022\036\n\026intersection_otherlane\030\010 \001("
      "\002\022\034\n\024intersection_offroad\030\t \001(\002\0220\n\021autop"
      "ilot_control\030\n \001(\0132\025.carla_server.Contro"
      "lB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "carla_server.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_carla_5fserver_2eproto

const ::google::protobuf::EnumDescriptor* Sensor_Type_descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_enum_descriptors[0];
}
bool Sensor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sensor_Type Sensor::UNKNOWN;
const Sensor_Type Sensor::CAMERA;
const Sensor_Type Sensor::LIDAR_RAY_CAST;
const Sensor_Type Sensor::Type_MIN;
const Sensor_Type Sensor::Type_MAX;
const int Sensor::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_State_descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_enum_descriptors[1];
}
bool TrafficLight_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_State TrafficLight::GREEN;
const TrafficLight_State TrafficLight::YELLOW;
const TrafficLight_State TrafficLight::RED;
const TrafficLight_State TrafficLight::State_MIN;
const TrafficLight_State TrafficLight::State_MAX;
const int TrafficLight::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3D::kXFieldNumber;
const int Vector3D::kYFieldNumber;
const int Vector3D::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3D::Vector3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Vector3D)
}
Vector3D::Vector3D(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Vector3D)
}
Vector3D::Vector3D(const Vector3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:carla_server.Vector3D)
}

void Vector3D::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:carla_server.Vector3D)
  SharedDtor();
}

void Vector3D::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Vector3D::ArenaDtor(void* object) {
  Vector3D* _this = reinterpret_cast< Vector3D* >(object);
  (void)_this;
}
void Vector3D::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Vector3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3D::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3D& Vector3D::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector3D* Vector3D::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Vector3D>(arena);
}

void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Vector3D)
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool Vector3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Vector3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Vector3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Vector3D)
  return false;
#undef DO_
}

void Vector3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Vector3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Vector3D)
}

::google::protobuf::uint8* Vector3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Vector3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Vector3D)
  return target;
}

size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Vector3D)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Vector3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Vector3D)
    MergeFrom(*source);
  }
}

void Vector3D::MergeFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  return true;
}

void Vector3D::Swap(Vector3D* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Vector3D* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Vector3D::UnsafeArenaSwap(Vector3D* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Vector3D::InternalSwap(Vector3D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3D::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3D

// float x = 1;
void Vector3D::clear_x() {
  x_ = 0;
}
float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:carla_server.Vector3D.x)
  return x_;
}
void Vector3D::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Vector3D.x)
}

// float y = 2;
void Vector3D::clear_y() {
  y_ = 0;
}
float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:carla_server.Vector3D.y)
  return y_;
}
void Vector3D::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Vector3D.y)
}

// float z = 3;
void Vector3D::clear_z() {
  z_ = 0;
}
float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:carla_server.Vector3D.z)
  return z_;
}
void Vector3D::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Vector3D.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rotation3D::kPitchFieldNumber;
const int Rotation3D::kYawFieldNumber;
const int Rotation3D::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rotation3D::Rotation3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Rotation3D)
}
Rotation3D::Rotation3D(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Rotation3D)
}
Rotation3D::Rotation3D(const Rotation3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:carla_server.Rotation3D)
}

void Rotation3D::SharedCtor() {
  ::memset(&pitch_, 0, reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_) + sizeof(roll_));
  _cached_size_ = 0;
}

Rotation3D::~Rotation3D() {
  // @@protoc_insertion_point(destructor:carla_server.Rotation3D)
  SharedDtor();
}

void Rotation3D::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Rotation3D::ArenaDtor(void* object) {
  Rotation3D* _this = reinterpret_cast< Rotation3D* >(object);
  (void)_this;
}
void Rotation3D::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Rotation3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rotation3D::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rotation3D& Rotation3D::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rotation3D* Rotation3D::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Rotation3D>(arena);
}

void Rotation3D::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Rotation3D)
  ::memset(&pitch_, 0, reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_) + sizeof(roll_));
}

bool Rotation3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Rotation3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Rotation3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Rotation3D)
  return false;
#undef DO_
}

void Rotation3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Rotation3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Rotation3D)
}

::google::protobuf::uint8* Rotation3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Rotation3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // float roll = 3;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Rotation3D)
  return target;
}

size_t Rotation3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Rotation3D)
  size_t total_size = 0;

  // float pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 2;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rotation3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Rotation3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Rotation3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rotation3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Rotation3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Rotation3D)
    MergeFrom(*source);
  }
}

void Rotation3D::MergeFrom(const Rotation3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Rotation3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void Rotation3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Rotation3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rotation3D::CopyFrom(const Rotation3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Rotation3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotation3D::IsInitialized() const {
  return true;
}

void Rotation3D::Swap(Rotation3D* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Rotation3D* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Rotation3D::UnsafeArenaSwap(Rotation3D* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Rotation3D::InternalSwap(Rotation3D* other) {
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(roll_, other->roll_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rotation3D::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rotation3D

// float pitch = 1;
void Rotation3D::clear_pitch() {
  pitch_ = 0;
}
float Rotation3D::pitch() const {
  // @@protoc_insertion_point(field_get:carla_server.Rotation3D.pitch)
  return pitch_;
}
void Rotation3D::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Rotation3D.pitch)
}

// float yaw = 2;
void Rotation3D::clear_yaw() {
  yaw_ = 0;
}
float Rotation3D::yaw() const {
  // @@protoc_insertion_point(field_get:carla_server.Rotation3D.yaw)
  return yaw_;
}
void Rotation3D::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Rotation3D.yaw)
}

// float roll = 3;
void Rotation3D::clear_roll() {
  roll_ = 0;
}
float Rotation3D::roll() const {
  // @@protoc_insertion_point(field_get:carla_server.Rotation3D.roll)
  return roll_;
}
void Rotation3D::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Rotation3D.roll)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Transform::_slow_mutable_location() {
  location_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Vector3D >(
      GetArenaNoVirtual());
}
::carla_server::Vector3D* Transform::_slow_release_location() {
  if (location_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Vector3D* temp = new ::carla_server::Vector3D(*location_);
    location_ = NULL;
    return temp;
  }
}
::carla_server::Vector3D* Transform::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Transform.location)
  
  ::carla_server::Vector3D* temp = location_;
  location_ = NULL;
  return temp;
}
void Transform::_slow_set_allocated_location(
    ::google::protobuf::Arena* message_arena, ::carla_server::Vector3D** location) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*location) == NULL) {
      message_arena->Own(*location);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*location)) {
      ::carla_server::Vector3D* new_location = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Vector3D >(
            message_arena);
      new_location->CopyFrom(**location);
      *location = new_location;
    }
}
void Transform::unsafe_arena_set_allocated_location(
    ::carla_server::Vector3D* location) {
  if (GetArenaNoVirtual() == NULL) {
    delete location_;
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Transform.location)
}
void Transform::_slow_mutable_orientation() {
  orientation_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Vector3D >(
      GetArenaNoVirtual());
}
::carla_server::Vector3D* Transform::_slow_release_orientation() {
  if (orientation_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Vector3D* temp = new ::carla_server::Vector3D(*orientation_);
    orientation_ = NULL;
    return temp;
  }
}
::carla_server::Vector3D* Transform::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Transform.orientation)
  
  ::carla_server::Vector3D* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void Transform::_slow_set_allocated_orientation(
    ::google::protobuf::Arena* message_arena, ::carla_server::Vector3D** orientation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*orientation) == NULL) {
      message_arena->Own(*orientation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*orientation)) {
      ::carla_server::Vector3D* new_orientation = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Vector3D >(
            message_arena);
      new_orientation->CopyFrom(**orientation);
      *orientation = new_orientation;
    }
}
void Transform::unsafe_arena_set_allocated_orientation(
    ::carla_server::Vector3D* orientation) {
  if (GetArenaNoVirtual() == NULL) {
    delete orientation_;
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Transform.orientation)
}
void Transform::_slow_mutable_rotation() {
  rotation_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Rotation3D >(
      GetArenaNoVirtual());
}
::carla_server::Rotation3D* Transform::_slow_release_rotation() {
  if (rotation_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Rotation3D* temp = new ::carla_server::Rotation3D(*rotation_);
    rotation_ = NULL;
    return temp;
  }
}
::carla_server::Rotation3D* Transform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Transform.rotation)
  
  ::carla_server::Rotation3D* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Transform::_slow_set_allocated_rotation(
    ::google::protobuf::Arena* message_arena, ::carla_server::Rotation3D** rotation) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*rotation) == NULL) {
      message_arena->Own(*rotation);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*rotation)) {
      ::carla_server::Rotation3D* new_rotation = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Rotation3D >(
            message_arena);
      new_rotation->CopyFrom(**rotation);
      *rotation = new_rotation;
    }
}
void Transform::unsafe_arena_set_allocated_rotation(
    ::carla_server::Rotation3D* rotation) {
  if (GetArenaNoVirtual() == NULL) {
    delete rotation_;
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Transform.rotation)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform::kLocationFieldNumber;
const int Transform::kOrientationFieldNumber;
const int Transform::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform::Transform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Transform)
}
Transform::Transform(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Transform)
}
Transform::Transform(const Transform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::carla_server::Vector3D(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::carla_server::Vector3D(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::carla_server::Rotation3D(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:carla_server.Transform)
}

void Transform::SharedCtor() {
  ::memset(&location_, 0, reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&location_) + sizeof(rotation_));
  _cached_size_ = 0;
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:carla_server.Transform)
  SharedDtor();
}

void Transform::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete orientation_;
  }
  if (this != internal_default_instance()) {
    delete rotation_;
  }
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transform& Transform::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transform* Transform::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Transform>(arena);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Transform)
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Transform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carla_server.Vector3D location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Vector3D orientation = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Rotation3D rotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Transform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Transform)
  return false;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Vector3D location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // .carla_server.Vector3D orientation = 2 [deprecated = true];
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // .carla_server.Rotation3D rotation = 3;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Transform)
}

::google::protobuf::uint8* Transform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Transform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Vector3D location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, deterministic, target);
  }

  // .carla_server.Vector3D orientation = 2 [deprecated = true];
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, deterministic, target);
  }

  // .carla_server.Rotation3D rotation = 3;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rotation_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Transform)
  size_t total_size = 0;

  // .carla_server.Vector3D location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .carla_server.Vector3D orientation = 2 [deprecated = true];
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // .carla_server.Rotation3D rotation = 3;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Transform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::carla_server::Vector3D::MergeFrom(from.location());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::carla_server::Vector3D::MergeFrom(from.orientation());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::carla_server::Rotation3D::MergeFrom(from.rotation());
  }
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::Swap(Transform* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Transform* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Transform::UnsafeArenaSwap(Transform* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Transform::InternalSwap(Transform* other) {
  std::swap(location_, other->location_);
  std::swap(orientation_, other->orientation_);
  std::swap(rotation_, other->rotation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform

// .carla_server.Vector3D location = 1;
bool Transform::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Transform::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::carla_server::Vector3D& Transform::location() const {
  // @@protoc_insertion_point(field_get:carla_server.Transform.location)
  return location_ != NULL ? *location_
                         : *::carla_server::Vector3D::internal_default_instance();
}
::carla_server::Vector3D* Transform::mutable_location() {
  
  if (location_ == NULL) {
    _slow_mutable_location();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Transform.location)
  return location_;
}
::carla_server::Vector3D* Transform::release_location() {
  // @@protoc_insertion_point(field_release:carla_server.Transform.location)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_location();
  } else {
    ::carla_server::Vector3D* temp = location_;
    location_ = NULL;
    return temp;
  }
}
 void Transform::set_allocated_location(::carla_server::Vector3D* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location != NULL) {
    _slow_set_allocated_location(message_arena, &location);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Transform.location)
}

// .carla_server.Vector3D orientation = 2 [deprecated = true];
bool Transform::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
void Transform::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::carla_server::Vector3D& Transform::orientation() const {
  // @@protoc_insertion_point(field_get:carla_server.Transform.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::carla_server::Vector3D::internal_default_instance();
}
::carla_server::Vector3D* Transform::mutable_orientation() {
  
  if (orientation_ == NULL) {
    _slow_mutable_orientation();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Transform.orientation)
  return orientation_;
}
::carla_server::Vector3D* Transform::release_orientation() {
  // @@protoc_insertion_point(field_release:carla_server.Transform.orientation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_orientation();
  } else {
    ::carla_server::Vector3D* temp = orientation_;
    orientation_ = NULL;
    return temp;
  }
}
 void Transform::set_allocated_orientation(::carla_server::Vector3D* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete orientation_;
  }
  if (orientation != NULL) {
    _slow_set_allocated_orientation(message_arena, &orientation);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Transform.orientation)
}

// .carla_server.Rotation3D rotation = 3;
bool Transform::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
void Transform::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::carla_server::Rotation3D& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:carla_server.Transform.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::carla_server::Rotation3D::internal_default_instance();
}
::carla_server::Rotation3D* Transform::mutable_rotation() {
  
  if (rotation_ == NULL) {
    _slow_mutable_rotation();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Transform.rotation)
  return rotation_;
}
::carla_server::Rotation3D* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:carla_server.Transform.rotation)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_rotation();
  } else {
    ::carla_server::Rotation3D* temp = rotation_;
    rotation_ = NULL;
    return temp;
  }
}
 void Transform::set_allocated_rotation(::carla_server::Rotation3D* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation != NULL) {
    _slow_set_allocated_rotation(message_arena, &rotation);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Transform.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void BoundingBox::_slow_mutable_transform() {
  transform_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
      GetArenaNoVirtual());
}
::carla_server::Transform* BoundingBox::_slow_release_transform() {
  if (transform_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Transform* temp = new ::carla_server::Transform(*transform_);
    transform_ = NULL;
    return temp;
  }
}
::carla_server::Transform* BoundingBox::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.BoundingBox.transform)
  
  ::carla_server::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void BoundingBox::_slow_set_allocated_transform(
    ::google::protobuf::Arena* message_arena, ::carla_server::Transform** transform) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*transform) == NULL) {
      message_arena->Own(*transform);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*transform)) {
      ::carla_server::Transform* new_transform = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
            message_arena);
      new_transform->CopyFrom(**transform);
      *transform = new_transform;
    }
}
void BoundingBox::unsafe_arena_set_allocated_transform(
    ::carla_server::Transform* transform) {
  if (GetArenaNoVirtual() == NULL) {
    delete transform_;
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.BoundingBox.transform)
}
void BoundingBox::_slow_mutable_extent() {
  extent_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Vector3D >(
      GetArenaNoVirtual());
}
::carla_server::Vector3D* BoundingBox::_slow_release_extent() {
  if (extent_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Vector3D* temp = new ::carla_server::Vector3D(*extent_);
    extent_ = NULL;
    return temp;
  }
}
::carla_server::Vector3D* BoundingBox::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.BoundingBox.extent)
  
  ::carla_server::Vector3D* temp = extent_;
  extent_ = NULL;
  return temp;
}
void BoundingBox::_slow_set_allocated_extent(
    ::google::protobuf::Arena* message_arena, ::carla_server::Vector3D** extent) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*extent) == NULL) {
      message_arena->Own(*extent);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*extent)) {
      ::carla_server::Vector3D* new_extent = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Vector3D >(
            message_arena);
      new_extent->CopyFrom(**extent);
      *extent = new_extent;
    }
}
void BoundingBox::unsafe_arena_set_allocated_extent(
    ::carla_server::Vector3D* extent) {
  if (GetArenaNoVirtual() == NULL) {
    delete extent_;
  }
  extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.BoundingBox.extent)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundingBox::kTransformFieldNumber;
const int BoundingBox::kExtentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundingBox::BoundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.BoundingBox)
}
BoundingBox::BoundingBox(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::carla_server::Transform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  if (from.has_extent()) {
    extent_ = new ::carla_server::Vector3D(*from.extent_);
  } else {
    extent_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:carla_server.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::memset(&transform_, 0, reinterpret_cast<char*>(&extent_) -
    reinterpret_cast<char*>(&transform_) + sizeof(extent_));
  _cached_size_ = 0;
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:carla_server.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete transform_;
  }
  if (this != internal_default_instance()) {
    delete extent_;
  }
}

void BoundingBox::ArenaDtor(void* object) {
  BoundingBox* _this = reinterpret_cast< BoundingBox* >(object);
  (void)_this;
}
void BoundingBox::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundingBox& BoundingBox::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoundingBox* BoundingBox::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BoundingBox>(arena);
}

void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.BoundingBox)
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  if (GetArenaNoVirtual() == NULL && extent_ != NULL) {
    delete extent_;
  }
  extent_ = NULL;
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.BoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carla_server.Transform transform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Vector3D extent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.BoundingBox)
  return false;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_, output);
  }

  // .carla_server.Vector3D extent = 2;
  if (this->has_extent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->extent_, output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.BoundingBox)
}

::google::protobuf::uint8* BoundingBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transform_, deterministic, target);
  }

  // .carla_server.Vector3D extent = 2;
  if (this->has_extent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->extent_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.BoundingBox)
  size_t total_size = 0;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  // .carla_server.Vector3D extent = 2;
  if (this->has_extent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundingBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.BoundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    mutable_transform()->::carla_server::Transform::MergeFrom(from.transform());
  }
  if (from.has_extent()) {
    mutable_extent()->::carla_server::Vector3D::MergeFrom(from.extent());
  }
}

void BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BoundingBox* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BoundingBox::UnsafeArenaSwap(BoundingBox* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BoundingBox::InternalSwap(BoundingBox* other) {
  std::swap(transform_, other->transform_);
  std::swap(extent_, other->extent_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundingBox

// .carla_server.Transform transform = 1;
bool BoundingBox::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
void BoundingBox::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::carla_server::Transform& BoundingBox::transform() const {
  // @@protoc_insertion_point(field_get:carla_server.BoundingBox.transform)
  return transform_ != NULL ? *transform_
                         : *::carla_server::Transform::internal_default_instance();
}
::carla_server::Transform* BoundingBox::mutable_transform() {
  
  if (transform_ == NULL) {
    _slow_mutable_transform();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.BoundingBox.transform)
  return transform_;
}
::carla_server::Transform* BoundingBox::release_transform() {
  // @@protoc_insertion_point(field_release:carla_server.BoundingBox.transform)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transform();
  } else {
    ::carla_server::Transform* temp = transform_;
    transform_ = NULL;
    return temp;
  }
}
 void BoundingBox::set_allocated_transform(::carla_server::Transform* transform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_;
  }
  if (transform != NULL) {
    _slow_set_allocated_transform(message_arena, &transform);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.BoundingBox.transform)
}

// .carla_server.Vector3D extent = 2;
bool BoundingBox::has_extent() const {
  return this != internal_default_instance() && extent_ != NULL;
}
void BoundingBox::clear_extent() {
  if (GetArenaNoVirtual() == NULL && extent_ != NULL) delete extent_;
  extent_ = NULL;
}
const ::carla_server::Vector3D& BoundingBox::extent() const {
  // @@protoc_insertion_point(field_get:carla_server.BoundingBox.extent)
  return extent_ != NULL ? *extent_
                         : *::carla_server::Vector3D::internal_default_instance();
}
::carla_server::Vector3D* BoundingBox::mutable_extent() {
  
  if (extent_ == NULL) {
    _slow_mutable_extent();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.BoundingBox.extent)
  return extent_;
}
::carla_server::Vector3D* BoundingBox::release_extent() {
  // @@protoc_insertion_point(field_release:carla_server.BoundingBox.extent)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_extent();
  } else {
    ::carla_server::Vector3D* temp = extent_;
    extent_ = NULL;
    return temp;
  }
}
 void BoundingBox::set_allocated_extent(::carla_server::Vector3D* extent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete extent_;
  }
  if (extent != NULL) {
    _slow_set_allocated_extent(message_arena, &extent);
  }
  extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.BoundingBox.extent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor::kIdFieldNumber;
const int Sensor::kTypeFieldNumber;
const int Sensor::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor::Sensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Sensor)
}
Sensor::Sensor(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:carla_server.Sensor)
}

void Sensor::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  _cached_size_ = 0;
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:carla_server.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Sensor::ArenaDtor(void* object) {
  Sensor* _this = reinterpret_cast< Sensor* >(object);
  (void)_this;
}
void Sensor::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Sensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sensor::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sensor& Sensor::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sensor* Sensor::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Sensor>(arena);
}

void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Sensor)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Sensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Sensor.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::carla_server::Sensor_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carla_server.Sensor.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // .carla_server.Sensor.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carla_server.Sensor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Sensor)
}

::google::protobuf::uint8* Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // .carla_server.Sensor.Type type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carla_server.Sensor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Sensor)
  size_t total_size = 0;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // fixed32 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 4;
  }

  // .carla_server.Sensor.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::Swap(Sensor* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Sensor* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Sensor::UnsafeArenaSwap(Sensor* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sensor

// fixed32 id = 1;
void Sensor::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 Sensor::id() const {
  // @@protoc_insertion_point(field_get:carla_server.Sensor.id)
  return id_;
}
void Sensor::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Sensor.id)
}

// .carla_server.Sensor.Type type = 2;
void Sensor::clear_type() {
  type_ = 0;
}
::carla_server::Sensor_Type Sensor::type() const {
  // @@protoc_insertion_point(field_get:carla_server.Sensor.type)
  return static_cast< ::carla_server::Sensor_Type >(type_);
}
void Sensor::set_type(::carla_server::Sensor_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Sensor.type)
}

// string name = 3;
void Sensor::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Sensor::name() const {
  // @@protoc_insertion_point(field_get:carla_server.Sensor.name)
  return name_.Get();
}
void Sensor::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carla_server.Sensor.name)
}
void Sensor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carla_server.Sensor.name)
}
void Sensor::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carla_server.Sensor.name)
}
::std::string* Sensor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:carla_server.Sensor.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Sensor::release_name() {
  // @@protoc_insertion_point(field_release:carla_server.Sensor.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Sensor::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Sensor.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Sensor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carla_server.Sensor.name)
}
void Sensor::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Sensor.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Vehicle::_slow_mutable_transform() {
  transform_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
      GetArenaNoVirtual());
}
::carla_server::Transform* Vehicle::_slow_release_transform() {
  if (transform_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Transform* temp = new ::carla_server::Transform(*transform_);
    transform_ = NULL;
    return temp;
  }
}
::carla_server::Transform* Vehicle::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Vehicle.transform)
  
  ::carla_server::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void Vehicle::_slow_set_allocated_transform(
    ::google::protobuf::Arena* message_arena, ::carla_server::Transform** transform) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*transform) == NULL) {
      message_arena->Own(*transform);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*transform)) {
      ::carla_server::Transform* new_transform = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
            message_arena);
      new_transform->CopyFrom(**transform);
      *transform = new_transform;
    }
}
void Vehicle::unsafe_arena_set_allocated_transform(
    ::carla_server::Transform* transform) {
  if (GetArenaNoVirtual() == NULL) {
    delete transform_;
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Vehicle.transform)
}
void Vehicle::_slow_mutable_bounding_box() {
  bounding_box_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::BoundingBox >(
      GetArenaNoVirtual());
}
::carla_server::BoundingBox* Vehicle::_slow_release_bounding_box() {
  if (bounding_box_ == NULL) {
    return NULL;
  } else {
    ::carla_server::BoundingBox* temp = new ::carla_server::BoundingBox(*bounding_box_);
    bounding_box_ = NULL;
    return temp;
  }
}
::carla_server::BoundingBox* Vehicle::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Vehicle.bounding_box)
  
  ::carla_server::BoundingBox* temp = bounding_box_;
  bounding_box_ = NULL;
  return temp;
}
void Vehicle::_slow_set_allocated_bounding_box(
    ::google::protobuf::Arena* message_arena, ::carla_server::BoundingBox** bounding_box) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*bounding_box) == NULL) {
      message_arena->Own(*bounding_box);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*bounding_box)) {
      ::carla_server::BoundingBox* new_bounding_box = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::BoundingBox >(
            message_arena);
      new_bounding_box->CopyFrom(**bounding_box);
      *bounding_box = new_bounding_box;
    }
}
void Vehicle::unsafe_arena_set_allocated_bounding_box(
    ::carla_server::BoundingBox* bounding_box) {
  if (GetArenaNoVirtual() == NULL) {
    delete bounding_box_;
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Vehicle.bounding_box)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle::kTransformFieldNumber;
const int Vehicle::kBoundingBoxFieldNumber;
const int Vehicle::kForwardSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle::Vehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Vehicle)
}
Vehicle::Vehicle(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::carla_server::Transform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  if (from.has_bounding_box()) {
    bounding_box_ = new ::carla_server::BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = NULL;
  }
  forward_speed_ = from.forward_speed_;
  // @@protoc_insertion_point(copy_constructor:carla_server.Vehicle)
}

void Vehicle::SharedCtor() {
  ::memset(&transform_, 0, reinterpret_cast<char*>(&forward_speed_) -
    reinterpret_cast<char*>(&transform_) + sizeof(forward_speed_));
  _cached_size_ = 0;
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:carla_server.Vehicle)
  SharedDtor();
}

void Vehicle::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete transform_;
  }
  if (this != internal_default_instance()) {
    delete bounding_box_;
  }
}

void Vehicle::ArenaDtor(void* object) {
  Vehicle* _this = reinterpret_cast< Vehicle* >(object);
  (void)_this;
}
void Vehicle::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Vehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle& Vehicle::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vehicle* Vehicle::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Vehicle>(arena);
}

void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Vehicle)
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  if (GetArenaNoVirtual() == NULL && bounding_box_ != NULL) {
    delete bounding_box_;
  }
  bounding_box_ = NULL;
  forward_speed_ = 0;
}

bool Vehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Vehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carla_server.Transform transform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.BoundingBox bounding_box = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Vehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Vehicle)
  return false;
#undef DO_
}

void Vehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_, output);
  }

  // float forward_speed = 3;
  if (this->forward_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->forward_speed(), output);
  }

  // .carla_server.BoundingBox bounding_box = 4;
  if (this->has_bounding_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bounding_box_, output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Vehicle)
}

::google::protobuf::uint8* Vehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transform_, deterministic, target);
  }

  // float forward_speed = 3;
  if (this->forward_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->forward_speed(), target);
  }

  // .carla_server.BoundingBox bounding_box = 4;
  if (this->has_bounding_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bounding_box_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Vehicle)
  return target;
}

size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Vehicle)
  size_t total_size = 0;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  // .carla_server.BoundingBox bounding_box = 4;
  if (this->has_bounding_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bounding_box_);
  }

  // float forward_speed = 3;
  if (this->forward_speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Vehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Vehicle)
    MergeFrom(*source);
  }
}

void Vehicle::MergeFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    mutable_transform()->::carla_server::Transform::MergeFrom(from.transform());
  }
  if (from.has_bounding_box()) {
    mutable_bounding_box()->::carla_server::BoundingBox::MergeFrom(from.bounding_box());
  }
  if (from.forward_speed() != 0) {
    set_forward_speed(from.forward_speed());
  }
}

void Vehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::Swap(Vehicle* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Vehicle* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Vehicle::UnsafeArenaSwap(Vehicle* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Vehicle::InternalSwap(Vehicle* other) {
  std::swap(transform_, other->transform_);
  std::swap(bounding_box_, other->bounding_box_);
  std::swap(forward_speed_, other->forward_speed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vehicle

// .carla_server.Transform transform = 1;
bool Vehicle::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
void Vehicle::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::carla_server::Transform& Vehicle::transform() const {
  // @@protoc_insertion_point(field_get:carla_server.Vehicle.transform)
  return transform_ != NULL ? *transform_
                         : *::carla_server::Transform::internal_default_instance();
}
::carla_server::Transform* Vehicle::mutable_transform() {
  
  if (transform_ == NULL) {
    _slow_mutable_transform();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Vehicle.transform)
  return transform_;
}
::carla_server::Transform* Vehicle::release_transform() {
  // @@protoc_insertion_point(field_release:carla_server.Vehicle.transform)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transform();
  } else {
    ::carla_server::Transform* temp = transform_;
    transform_ = NULL;
    return temp;
  }
}
 void Vehicle::set_allocated_transform(::carla_server::Transform* transform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_;
  }
  if (transform != NULL) {
    _slow_set_allocated_transform(message_arena, &transform);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Vehicle.transform)
}

// .carla_server.BoundingBox bounding_box = 4;
bool Vehicle::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != NULL;
}
void Vehicle::clear_bounding_box() {
  if (GetArenaNoVirtual() == NULL && bounding_box_ != NULL) delete bounding_box_;
  bounding_box_ = NULL;
}
const ::carla_server::BoundingBox& Vehicle::bounding_box() const {
  // @@protoc_insertion_point(field_get:carla_server.Vehicle.bounding_box)
  return bounding_box_ != NULL ? *bounding_box_
                         : *::carla_server::BoundingBox::internal_default_instance();
}
::carla_server::BoundingBox* Vehicle::mutable_bounding_box() {
  
  if (bounding_box_ == NULL) {
    _slow_mutable_bounding_box();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Vehicle.bounding_box)
  return bounding_box_;
}
::carla_server::BoundingBox* Vehicle::release_bounding_box() {
  // @@protoc_insertion_point(field_release:carla_server.Vehicle.bounding_box)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_bounding_box();
  } else {
    ::carla_server::BoundingBox* temp = bounding_box_;
    bounding_box_ = NULL;
    return temp;
  }
}
 void Vehicle::set_allocated_bounding_box(::carla_server::BoundingBox* bounding_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bounding_box_;
  }
  if (bounding_box != NULL) {
    _slow_set_allocated_bounding_box(message_arena, &bounding_box);
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Vehicle.bounding_box)
}

// float forward_speed = 3;
void Vehicle::clear_forward_speed() {
  forward_speed_ = 0;
}
float Vehicle::forward_speed() const {
  // @@protoc_insertion_point(field_get:carla_server.Vehicle.forward_speed)
  return forward_speed_;
}
void Vehicle::set_forward_speed(float value) {
  
  forward_speed_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Vehicle.forward_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Pedestrian::_slow_mutable_transform() {
  transform_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
      GetArenaNoVirtual());
}
::carla_server::Transform* Pedestrian::_slow_release_transform() {
  if (transform_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Transform* temp = new ::carla_server::Transform(*transform_);
    transform_ = NULL;
    return temp;
  }
}
::carla_server::Transform* Pedestrian::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Pedestrian.transform)
  
  ::carla_server::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void Pedestrian::_slow_set_allocated_transform(
    ::google::protobuf::Arena* message_arena, ::carla_server::Transform** transform) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*transform) == NULL) {
      message_arena->Own(*transform);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*transform)) {
      ::carla_server::Transform* new_transform = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
            message_arena);
      new_transform->CopyFrom(**transform);
      *transform = new_transform;
    }
}
void Pedestrian::unsafe_arena_set_allocated_transform(
    ::carla_server::Transform* transform) {
  if (GetArenaNoVirtual() == NULL) {
    delete transform_;
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Pedestrian.transform)
}
void Pedestrian::_slow_mutable_bounding_box() {
  bounding_box_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::BoundingBox >(
      GetArenaNoVirtual());
}
::carla_server::BoundingBox* Pedestrian::_slow_release_bounding_box() {
  if (bounding_box_ == NULL) {
    return NULL;
  } else {
    ::carla_server::BoundingBox* temp = new ::carla_server::BoundingBox(*bounding_box_);
    bounding_box_ = NULL;
    return temp;
  }
}
::carla_server::BoundingBox* Pedestrian::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Pedestrian.bounding_box)
  
  ::carla_server::BoundingBox* temp = bounding_box_;
  bounding_box_ = NULL;
  return temp;
}
void Pedestrian::_slow_set_allocated_bounding_box(
    ::google::protobuf::Arena* message_arena, ::carla_server::BoundingBox** bounding_box) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*bounding_box) == NULL) {
      message_arena->Own(*bounding_box);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*bounding_box)) {
      ::carla_server::BoundingBox* new_bounding_box = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::BoundingBox >(
            message_arena);
      new_bounding_box->CopyFrom(**bounding_box);
      *bounding_box = new_bounding_box;
    }
}
void Pedestrian::unsafe_arena_set_allocated_bounding_box(
    ::carla_server::BoundingBox* bounding_box) {
  if (GetArenaNoVirtual() == NULL) {
    delete bounding_box_;
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Pedestrian.bounding_box)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pedestrian::kTransformFieldNumber;
const int Pedestrian::kBoundingBoxFieldNumber;
const int Pedestrian::kForwardSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pedestrian::Pedestrian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Pedestrian)
}
Pedestrian::Pedestrian(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Pedestrian)
}
Pedestrian::Pedestrian(const Pedestrian& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::carla_server::Transform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  if (from.has_bounding_box()) {
    bounding_box_ = new ::carla_server::BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = NULL;
  }
  forward_speed_ = from.forward_speed_;
  // @@protoc_insertion_point(copy_constructor:carla_server.Pedestrian)
}

void Pedestrian::SharedCtor() {
  ::memset(&transform_, 0, reinterpret_cast<char*>(&forward_speed_) -
    reinterpret_cast<char*>(&transform_) + sizeof(forward_speed_));
  _cached_size_ = 0;
}

Pedestrian::~Pedestrian() {
  // @@protoc_insertion_point(destructor:carla_server.Pedestrian)
  SharedDtor();
}

void Pedestrian::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete transform_;
  }
  if (this != internal_default_instance()) {
    delete bounding_box_;
  }
}

void Pedestrian::ArenaDtor(void* object) {
  Pedestrian* _this = reinterpret_cast< Pedestrian* >(object);
  (void)_this;
}
void Pedestrian::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Pedestrian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pedestrian::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pedestrian& Pedestrian::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pedestrian* Pedestrian::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Pedestrian>(arena);
}

void Pedestrian::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Pedestrian)
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  if (GetArenaNoVirtual() == NULL && bounding_box_ != NULL) {
    delete bounding_box_;
  }
  bounding_box_ = NULL;
  forward_speed_ = 0;
}

bool Pedestrian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Pedestrian)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carla_server.Transform transform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.BoundingBox bounding_box = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Pedestrian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Pedestrian)
  return false;
#undef DO_
}

void Pedestrian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Pedestrian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_, output);
  }

  // float forward_speed = 3;
  if (this->forward_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->forward_speed(), output);
  }

  // .carla_server.BoundingBox bounding_box = 4;
  if (this->has_bounding_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bounding_box_, output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Pedestrian)
}

::google::protobuf::uint8* Pedestrian::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Pedestrian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transform_, deterministic, target);
  }

  // float forward_speed = 3;
  if (this->forward_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->forward_speed(), target);
  }

  // .carla_server.BoundingBox bounding_box = 4;
  if (this->has_bounding_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bounding_box_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Pedestrian)
  return target;
}

size_t Pedestrian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Pedestrian)
  size_t total_size = 0;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  // .carla_server.BoundingBox bounding_box = 4;
  if (this->has_bounding_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bounding_box_);
  }

  // float forward_speed = 3;
  if (this->forward_speed() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pedestrian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Pedestrian)
  GOOGLE_DCHECK_NE(&from, this);
  const Pedestrian* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pedestrian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Pedestrian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Pedestrian)
    MergeFrom(*source);
  }
}

void Pedestrian::MergeFrom(const Pedestrian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Pedestrian)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    mutable_transform()->::carla_server::Transform::MergeFrom(from.transform());
  }
  if (from.has_bounding_box()) {
    mutable_bounding_box()->::carla_server::BoundingBox::MergeFrom(from.bounding_box());
  }
  if (from.forward_speed() != 0) {
    set_forward_speed(from.forward_speed());
  }
}

void Pedestrian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Pedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pedestrian::CopyFrom(const Pedestrian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Pedestrian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pedestrian::IsInitialized() const {
  return true;
}

void Pedestrian::Swap(Pedestrian* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Pedestrian* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Pedestrian::UnsafeArenaSwap(Pedestrian* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Pedestrian::InternalSwap(Pedestrian* other) {
  std::swap(transform_, other->transform_);
  std::swap(bounding_box_, other->bounding_box_);
  std::swap(forward_speed_, other->forward_speed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pedestrian::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pedestrian

// .carla_server.Transform transform = 1;
bool Pedestrian::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
void Pedestrian::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::carla_server::Transform& Pedestrian::transform() const {
  // @@protoc_insertion_point(field_get:carla_server.Pedestrian.transform)
  return transform_ != NULL ? *transform_
                         : *::carla_server::Transform::internal_default_instance();
}
::carla_server::Transform* Pedestrian::mutable_transform() {
  
  if (transform_ == NULL) {
    _slow_mutable_transform();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Pedestrian.transform)
  return transform_;
}
::carla_server::Transform* Pedestrian::release_transform() {
  // @@protoc_insertion_point(field_release:carla_server.Pedestrian.transform)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transform();
  } else {
    ::carla_server::Transform* temp = transform_;
    transform_ = NULL;
    return temp;
  }
}
 void Pedestrian::set_allocated_transform(::carla_server::Transform* transform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_;
  }
  if (transform != NULL) {
    _slow_set_allocated_transform(message_arena, &transform);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Pedestrian.transform)
}

// .carla_server.BoundingBox bounding_box = 4;
bool Pedestrian::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != NULL;
}
void Pedestrian::clear_bounding_box() {
  if (GetArenaNoVirtual() == NULL && bounding_box_ != NULL) delete bounding_box_;
  bounding_box_ = NULL;
}
const ::carla_server::BoundingBox& Pedestrian::bounding_box() const {
  // @@protoc_insertion_point(field_get:carla_server.Pedestrian.bounding_box)
  return bounding_box_ != NULL ? *bounding_box_
                         : *::carla_server::BoundingBox::internal_default_instance();
}
::carla_server::BoundingBox* Pedestrian::mutable_bounding_box() {
  
  if (bounding_box_ == NULL) {
    _slow_mutable_bounding_box();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Pedestrian.bounding_box)
  return bounding_box_;
}
::carla_server::BoundingBox* Pedestrian::release_bounding_box() {
  // @@protoc_insertion_point(field_release:carla_server.Pedestrian.bounding_box)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_bounding_box();
  } else {
    ::carla_server::BoundingBox* temp = bounding_box_;
    bounding_box_ = NULL;
    return temp;
  }
}
 void Pedestrian::set_allocated_bounding_box(::carla_server::BoundingBox* bounding_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bounding_box_;
  }
  if (bounding_box != NULL) {
    _slow_set_allocated_bounding_box(message_arena, &bounding_box);
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Pedestrian.bounding_box)
}

// float forward_speed = 3;
void Pedestrian::clear_forward_speed() {
  forward_speed_ = 0;
}
float Pedestrian::forward_speed() const {
  // @@protoc_insertion_point(field_get:carla_server.Pedestrian.forward_speed)
  return forward_speed_;
}
void Pedestrian::set_forward_speed(float value) {
  
  forward_speed_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Pedestrian.forward_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void TrafficLight::_slow_mutable_transform() {
  transform_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
      GetArenaNoVirtual());
}
::carla_server::Transform* TrafficLight::_slow_release_transform() {
  if (transform_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Transform* temp = new ::carla_server::Transform(*transform_);
    transform_ = NULL;
    return temp;
  }
}
::carla_server::Transform* TrafficLight::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.TrafficLight.transform)
  
  ::carla_server::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void TrafficLight::_slow_set_allocated_transform(
    ::google::protobuf::Arena* message_arena, ::carla_server::Transform** transform) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*transform) == NULL) {
      message_arena->Own(*transform);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*transform)) {
      ::carla_server::Transform* new_transform = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
            message_arena);
      new_transform->CopyFrom(**transform);
      *transform = new_transform;
    }
}
void TrafficLight::unsafe_arena_set_allocated_transform(
    ::carla_server::Transform* transform) {
  if (GetArenaNoVirtual() == NULL) {
    delete transform_;
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.TrafficLight.transform)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kTransformFieldNumber;
const int TrafficLight::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.TrafficLight)
}
TrafficLight::TrafficLight(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::carla_server::Transform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:carla_server.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::memset(&transform_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&transform_) + sizeof(state_));
  _cached_size_ = 0;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:carla_server.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete transform_;
  }
}

void TrafficLight::ArenaDtor(void* object) {
  TrafficLight* _this = reinterpret_cast< TrafficLight* >(object);
  (void)_this;
}
void TrafficLight::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<TrafficLight>(arena);
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.TrafficLight)
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  state_ = 0;
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carla_server.Transform transform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.TrafficLight.State state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::carla_server::TrafficLight_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_, output);
  }

  // .carla_server.TrafficLight.State state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transform_, deterministic, target);
  }

  // .carla_server.TrafficLight.State state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.TrafficLight)
  size_t total_size = 0;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  // .carla_server.TrafficLight.State state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    mutable_transform()->::carla_server::Transform::MergeFrom(from.transform());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TrafficLight* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void TrafficLight::UnsafeArenaSwap(TrafficLight* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  std::swap(transform_, other->transform_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight

// .carla_server.Transform transform = 1;
bool TrafficLight::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
void TrafficLight::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::carla_server::Transform& TrafficLight::transform() const {
  // @@protoc_insertion_point(field_get:carla_server.TrafficLight.transform)
  return transform_ != NULL ? *transform_
                         : *::carla_server::Transform::internal_default_instance();
}
::carla_server::Transform* TrafficLight::mutable_transform() {
  
  if (transform_ == NULL) {
    _slow_mutable_transform();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.TrafficLight.transform)
  return transform_;
}
::carla_server::Transform* TrafficLight::release_transform() {
  // @@protoc_insertion_point(field_release:carla_server.TrafficLight.transform)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transform();
  } else {
    ::carla_server::Transform* temp = transform_;
    transform_ = NULL;
    return temp;
  }
}
 void TrafficLight::set_allocated_transform(::carla_server::Transform* transform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_;
  }
  if (transform != NULL) {
    _slow_set_allocated_transform(message_arena, &transform);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.TrafficLight.transform)
}

// .carla_server.TrafficLight.State state = 2;
void TrafficLight::clear_state() {
  state_ = 0;
}
::carla_server::TrafficLight_State TrafficLight::state() const {
  // @@protoc_insertion_point(field_get:carla_server.TrafficLight.state)
  return static_cast< ::carla_server::TrafficLight_State >(state_);
}
void TrafficLight::set_state(::carla_server::TrafficLight_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:carla_server.TrafficLight.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SpeedLimitSign::_slow_mutable_transform() {
  transform_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
      GetArenaNoVirtual());
}
::carla_server::Transform* SpeedLimitSign::_slow_release_transform() {
  if (transform_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Transform* temp = new ::carla_server::Transform(*transform_);
    transform_ = NULL;
    return temp;
  }
}
::carla_server::Transform* SpeedLimitSign::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.SpeedLimitSign.transform)
  
  ::carla_server::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void SpeedLimitSign::_slow_set_allocated_transform(
    ::google::protobuf::Arena* message_arena, ::carla_server::Transform** transform) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*transform) == NULL) {
      message_arena->Own(*transform);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*transform)) {
      ::carla_server::Transform* new_transform = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
            message_arena);
      new_transform->CopyFrom(**transform);
      *transform = new_transform;
    }
}
void SpeedLimitSign::unsafe_arena_set_allocated_transform(
    ::carla_server::Transform* transform) {
  if (GetArenaNoVirtual() == NULL) {
    delete transform_;
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.SpeedLimitSign.transform)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedLimitSign::kTransformFieldNumber;
const int SpeedLimitSign::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedLimitSign::SpeedLimitSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.SpeedLimitSign)
}
SpeedLimitSign::SpeedLimitSign(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.SpeedLimitSign)
}
SpeedLimitSign::SpeedLimitSign(const SpeedLimitSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::carla_server::Transform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  speed_limit_ = from.speed_limit_;
  // @@protoc_insertion_point(copy_constructor:carla_server.SpeedLimitSign)
}

void SpeedLimitSign::SharedCtor() {
  ::memset(&transform_, 0, reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&transform_) + sizeof(speed_limit_));
  _cached_size_ = 0;
}

SpeedLimitSign::~SpeedLimitSign() {
  // @@protoc_insertion_point(destructor:carla_server.SpeedLimitSign)
  SharedDtor();
}

void SpeedLimitSign::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete transform_;
  }
}

void SpeedLimitSign::ArenaDtor(void* object) {
  SpeedLimitSign* _this = reinterpret_cast< SpeedLimitSign* >(object);
  (void)_this;
}
void SpeedLimitSign::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpeedLimitSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedLimitSign::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedLimitSign& SpeedLimitSign::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedLimitSign* SpeedLimitSign::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpeedLimitSign>(arena);
}

void SpeedLimitSign::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.SpeedLimitSign)
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  speed_limit_ = 0;
}

bool SpeedLimitSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.SpeedLimitSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carla_server.Transform transform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.SpeedLimitSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.SpeedLimitSign)
  return false;
#undef DO_
}

void SpeedLimitSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.SpeedLimitSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_, output);
  }

  // float speed_limit = 2;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed_limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.SpeedLimitSign)
}

::google::protobuf::uint8* SpeedLimitSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.SpeedLimitSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transform_, deterministic, target);
  }

  // float speed_limit = 2;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed_limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.SpeedLimitSign)
  return target;
}

size_t SpeedLimitSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.SpeedLimitSign)
  size_t total_size = 0;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  // float speed_limit = 2;
  if (this->speed_limit() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedLimitSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.SpeedLimitSign)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedLimitSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedLimitSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.SpeedLimitSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.SpeedLimitSign)
    MergeFrom(*source);
  }
}

void SpeedLimitSign::MergeFrom(const SpeedLimitSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.SpeedLimitSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    mutable_transform()->::carla_server::Transform::MergeFrom(from.transform());
  }
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
}

void SpeedLimitSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.SpeedLimitSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedLimitSign::CopyFrom(const SpeedLimitSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.SpeedLimitSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedLimitSign::IsInitialized() const {
  return true;
}

void SpeedLimitSign::Swap(SpeedLimitSign* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpeedLimitSign* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpeedLimitSign::UnsafeArenaSwap(SpeedLimitSign* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpeedLimitSign::InternalSwap(SpeedLimitSign* other) {
  std::swap(transform_, other->transform_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedLimitSign::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedLimitSign

// .carla_server.Transform transform = 1;
bool SpeedLimitSign::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
void SpeedLimitSign::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::carla_server::Transform& SpeedLimitSign::transform() const {
  // @@protoc_insertion_point(field_get:carla_server.SpeedLimitSign.transform)
  return transform_ != NULL ? *transform_
                         : *::carla_server::Transform::internal_default_instance();
}
::carla_server::Transform* SpeedLimitSign::mutable_transform() {
  
  if (transform_ == NULL) {
    _slow_mutable_transform();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.SpeedLimitSign.transform)
  return transform_;
}
::carla_server::Transform* SpeedLimitSign::release_transform() {
  // @@protoc_insertion_point(field_release:carla_server.SpeedLimitSign.transform)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transform();
  } else {
    ::carla_server::Transform* temp = transform_;
    transform_ = NULL;
    return temp;
  }
}
 void SpeedLimitSign::set_allocated_transform(::carla_server::Transform* transform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_;
  }
  if (transform != NULL) {
    _slow_set_allocated_transform(message_arena, &transform);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.SpeedLimitSign.transform)
}

// float speed_limit = 2;
void SpeedLimitSign::clear_speed_limit() {
  speed_limit_ = 0;
}
float SpeedLimitSign::speed_limit() const {
  // @@protoc_insertion_point(field_get:carla_server.SpeedLimitSign.speed_limit)
  return speed_limit_;
}
void SpeedLimitSign::set_speed_limit(float value) {
  
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:carla_server.SpeedLimitSign.speed_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Agent::kIdFieldNumber;
const int Agent::kVehicleFieldNumber;
const int Agent::kPedestrianFieldNumber;
const int Agent::kTrafficLightFieldNumber;
const int Agent::kSpeedLimitSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Agent::Agent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Agent)
}
Agent::Agent(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Agent)
}
Agent::Agent(const Agent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  clear_has_agent();
  switch (from.agent_case()) {
    case kVehicle: {
      mutable_vehicle()->::carla_server::Vehicle::MergeFrom(from.vehicle());
      break;
    }
    case kPedestrian: {
      mutable_pedestrian()->::carla_server::Pedestrian::MergeFrom(from.pedestrian());
      break;
    }
    case kTrafficLight: {
      mutable_traffic_light()->::carla_server::TrafficLight::MergeFrom(from.traffic_light());
      break;
    }
    case kSpeedLimitSign: {
      mutable_speed_limit_sign()->::carla_server::SpeedLimitSign::MergeFrom(from.speed_limit_sign());
      break;
    }
    case AGENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:carla_server.Agent)
}

void Agent::SharedCtor() {
  id_ = 0u;
  clear_has_agent();
  _cached_size_ = 0;
}

Agent::~Agent() {
  // @@protoc_insertion_point(destructor:carla_server.Agent)
  SharedDtor();
}

void Agent::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (has_agent()) {
    clear_agent();
  }
}

void Agent::ArenaDtor(void* object) {
  Agent* _this = reinterpret_cast< Agent* >(object);
  (void)_this;
}
void Agent::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Agent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Agent::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Agent& Agent::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Agent* Agent::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Agent>(arena);
}

void Agent::clear_agent() {
// @@protoc_insertion_point(one_of_clear_start:carla_server.Agent)
  switch (agent_case()) {
    case kVehicle: {
      if (GetArenaNoVirtual() == NULL) {
        delete agent_.vehicle_;
      }
      break;
    }
    case kPedestrian: {
      if (GetArenaNoVirtual() == NULL) {
        delete agent_.pedestrian_;
      }
      break;
    }
    case kTrafficLight: {
      if (GetArenaNoVirtual() == NULL) {
        delete agent_.traffic_light_;
      }
      break;
    }
    case kSpeedLimitSign: {
      if (GetArenaNoVirtual() == NULL) {
        delete agent_.speed_limit_sign_;
      }
      break;
    }
    case AGENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AGENT_NOT_SET;
}


void Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Agent)
  id_ = 0u;
  clear_agent();
}

bool Agent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Agent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Vehicle vehicle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Pedestrian pedestrian = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pedestrian()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.TrafficLight traffic_light = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.SpeedLimitSign speed_limit_sign = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed_limit_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Agent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Agent)
  return false;
#undef DO_
}

void Agent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Agent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // .carla_server.Vehicle vehicle = 2;
  if (has_vehicle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *agent_.vehicle_, output);
  }

  // .carla_server.Pedestrian pedestrian = 3;
  if (has_pedestrian()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *agent_.pedestrian_, output);
  }

  // .carla_server.TrafficLight traffic_light = 4;
  if (has_traffic_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *agent_.traffic_light_, output);
  }

  // .carla_server.SpeedLimitSign speed_limit_sign = 5;
  if (has_speed_limit_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *agent_.speed_limit_sign_, output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Agent)
}

::google::protobuf::uint8* Agent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Agent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // .carla_server.Vehicle vehicle = 2;
  if (has_vehicle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *agent_.vehicle_, deterministic, target);
  }

  // .carla_server.Pedestrian pedestrian = 3;
  if (has_pedestrian()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *agent_.pedestrian_, deterministic, target);
  }

  // .carla_server.TrafficLight traffic_light = 4;
  if (has_traffic_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *agent_.traffic_light_, deterministic, target);
  }

  // .carla_server.SpeedLimitSign speed_limit_sign = 5;
  if (has_speed_limit_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *agent_.speed_limit_sign_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Agent)
  return target;
}

size_t Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Agent)
  size_t total_size = 0;

  // fixed32 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 4;
  }

  switch (agent_case()) {
    // .carla_server.Vehicle vehicle = 2;
    case kVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *agent_.vehicle_);
      break;
    }
    // .carla_server.Pedestrian pedestrian = 3;
    case kPedestrian: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *agent_.pedestrian_);
      break;
    }
    // .carla_server.TrafficLight traffic_light = 4;
    case kTrafficLight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *agent_.traffic_light_);
      break;
    }
    // .carla_server.SpeedLimitSign speed_limit_sign = 5;
    case kSpeedLimitSign: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *agent_.speed_limit_sign_);
      break;
    }
    case AGENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Agent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  const Agent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Agent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Agent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Agent)
    MergeFrom(*source);
  }
}

void Agent::MergeFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  switch (from.agent_case()) {
    case kVehicle: {
      mutable_vehicle()->::carla_server::Vehicle::MergeFrom(from.vehicle());
      break;
    }
    case kPedestrian: {
      mutable_pedestrian()->::carla_server::Pedestrian::MergeFrom(from.pedestrian());
      break;
    }
    case kTrafficLight: {
      mutable_traffic_light()->::carla_server::TrafficLight::MergeFrom(from.traffic_light());
      break;
    }
    case kSpeedLimitSign: {
      mutable_speed_limit_sign()->::carla_server::SpeedLimitSign::MergeFrom(from.speed_limit_sign());
      break;
    }
    case AGENT_NOT_SET: {
      break;
    }
  }
}

void Agent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agent::CopyFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent::IsInitialized() const {
  return true;
}

void Agent::Swap(Agent* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Agent* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Agent::UnsafeArenaSwap(Agent* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Agent::InternalSwap(Agent* other) {
  std::swap(id_, other->id_);
  std::swap(agent_, other->agent_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Agent::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Agent

// fixed32 id = 1;
void Agent::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 Agent::id() const {
  // @@protoc_insertion_point(field_get:carla_server.Agent.id)
  return id_;
}
void Agent::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Agent.id)
}

// .carla_server.Vehicle vehicle = 2;
bool Agent::has_vehicle() const {
  return agent_case() == kVehicle;
}
void Agent::set_has_vehicle() {
  _oneof_case_[0] = kVehicle;
}
void Agent::clear_vehicle() {
  if (has_vehicle()) {
    if (GetArenaNoVirtual() == NULL) {
      delete agent_.vehicle_;
    }
    clear_has_agent();
  }
}
 const ::carla_server::Vehicle& Agent::vehicle() const {
  // @@protoc_insertion_point(field_get:carla_server.Agent.vehicle)
  return has_vehicle()
      ? *agent_.vehicle_
      : ::carla_server::Vehicle::default_instance();
}
::carla_server::Vehicle* Agent::mutable_vehicle() {
  if (!has_vehicle()) {
    clear_agent();
    set_has_vehicle();
    agent_.vehicle_ = 
      ::google::protobuf::Arena::CreateMessage< ::carla_server::Vehicle >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Agent.vehicle)
  return agent_.vehicle_;
}
::carla_server::Vehicle* Agent::release_vehicle() {
  // @@protoc_insertion_point(field_release:carla_server.Agent.vehicle)
  if (has_vehicle()) {
    clear_has_agent();
    if (GetArenaNoVirtual() != NULL) {
      ::carla_server::Vehicle* temp = new ::carla_server::Vehicle(*agent_.vehicle_);
      agent_.vehicle_ = NULL;
      return temp;
    } else {
      ::carla_server::Vehicle* temp = agent_.vehicle_;
      agent_.vehicle_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Agent::set_allocated_vehicle(::carla_server::Vehicle* vehicle) {
  clear_agent();
  if (vehicle) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(vehicle) == NULL) {
      GetArenaNoVirtual()->Own(vehicle);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(vehicle)) {
      ::carla_server::Vehicle* new_vehicle = 
          ::google::protobuf::Arena::CreateMessage< ::carla_server::Vehicle >(
          GetArenaNoVirtual());
      new_vehicle->CopyFrom(*vehicle);
      vehicle = new_vehicle;
    }
    set_has_vehicle();
    agent_.vehicle_ = vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Agent.vehicle)
}
 ::carla_server::Vehicle* Agent::unsafe_arena_release_vehicle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Agent.vehicle)
  if (has_vehicle()) {
    clear_has_agent();
    ::carla_server::Vehicle* temp = agent_.vehicle_;
    agent_.vehicle_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Agent::unsafe_arena_set_allocated_vehicle(::carla_server::Vehicle* vehicle) {
  clear_agent();
  if (vehicle) {
    set_has_vehicle();
    agent_.vehicle_ = vehicle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Agent.vehicle)
}

// .carla_server.Pedestrian pedestrian = 3;
bool Agent::has_pedestrian() const {
  return agent_case() == kPedestrian;
}
void Agent::set_has_pedestrian() {
  _oneof_case_[0] = kPedestrian;
}
void Agent::clear_pedestrian() {
  if (has_pedestrian()) {
    if (GetArenaNoVirtual() == NULL) {
      delete agent_.pedestrian_;
    }
    clear_has_agent();
  }
}
 const ::carla_server::Pedestrian& Agent::pedestrian() const {
  // @@protoc_insertion_point(field_get:carla_server.Agent.pedestrian)
  return has_pedestrian()
      ? *agent_.pedestrian_
      : ::carla_server::Pedestrian::default_instance();
}
::carla_server::Pedestrian* Agent::mutable_pedestrian() {
  if (!has_pedestrian()) {
    clear_agent();
    set_has_pedestrian();
    agent_.pedestrian_ = 
      ::google::protobuf::Arena::CreateMessage< ::carla_server::Pedestrian >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Agent.pedestrian)
  return agent_.pedestrian_;
}
::carla_server::Pedestrian* Agent::release_pedestrian() {
  // @@protoc_insertion_point(field_release:carla_server.Agent.pedestrian)
  if (has_pedestrian()) {
    clear_has_agent();
    if (GetArenaNoVirtual() != NULL) {
      ::carla_server::Pedestrian* temp = new ::carla_server::Pedestrian(*agent_.pedestrian_);
      agent_.pedestrian_ = NULL;
      return temp;
    } else {
      ::carla_server::Pedestrian* temp = agent_.pedestrian_;
      agent_.pedestrian_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Agent::set_allocated_pedestrian(::carla_server::Pedestrian* pedestrian) {
  clear_agent();
  if (pedestrian) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(pedestrian) == NULL) {
      GetArenaNoVirtual()->Own(pedestrian);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(pedestrian)) {
      ::carla_server::Pedestrian* new_pedestrian = 
          ::google::protobuf::Arena::CreateMessage< ::carla_server::Pedestrian >(
          GetArenaNoVirtual());
      new_pedestrian->CopyFrom(*pedestrian);
      pedestrian = new_pedestrian;
    }
    set_has_pedestrian();
    agent_.pedestrian_ = pedestrian;
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Agent.pedestrian)
}
 ::carla_server::Pedestrian* Agent::unsafe_arena_release_pedestrian() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Agent.pedestrian)
  if (has_pedestrian()) {
    clear_has_agent();
    ::carla_server::Pedestrian* temp = agent_.pedestrian_;
    agent_.pedestrian_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Agent::unsafe_arena_set_allocated_pedestrian(::carla_server::Pedestrian* pedestrian) {
  clear_agent();
  if (pedestrian) {
    set_has_pedestrian();
    agent_.pedestrian_ = pedestrian;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Agent.pedestrian)
}

// .carla_server.TrafficLight traffic_light = 4;
bool Agent::has_traffic_light() const {
  return agent_case() == kTrafficLight;
}
void Agent::set_has_traffic_light() {
  _oneof_case_[0] = kTrafficLight;
}
void Agent::clear_traffic_light() {
  if (has_traffic_light()) {
    if (GetArenaNoVirtual() == NULL) {
      delete agent_.traffic_light_;
    }
    clear_has_agent();
  }
}
 const ::carla_server::TrafficLight& Agent::traffic_light() const {
  // @@protoc_insertion_point(field_get:carla_server.Agent.traffic_light)
  return has_traffic_light()
      ? *agent_.traffic_light_
      : ::carla_server::TrafficLight::default_instance();
}
::carla_server::TrafficLight* Agent::mutable_traffic_light() {
  if (!has_traffic_light()) {
    clear_agent();
    set_has_traffic_light();
    agent_.traffic_light_ = 
      ::google::protobuf::Arena::CreateMessage< ::carla_server::TrafficLight >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Agent.traffic_light)
  return agent_.traffic_light_;
}
::carla_server::TrafficLight* Agent::release_traffic_light() {
  // @@protoc_insertion_point(field_release:carla_server.Agent.traffic_light)
  if (has_traffic_light()) {
    clear_has_agent();
    if (GetArenaNoVirtual() != NULL) {
      ::carla_server::TrafficLight* temp = new ::carla_server::TrafficLight(*agent_.traffic_light_);
      agent_.traffic_light_ = NULL;
      return temp;
    } else {
      ::carla_server::TrafficLight* temp = agent_.traffic_light_;
      agent_.traffic_light_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Agent::set_allocated_traffic_light(::carla_server::TrafficLight* traffic_light) {
  clear_agent();
  if (traffic_light) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(traffic_light) == NULL) {
      GetArenaNoVirtual()->Own(traffic_light);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(traffic_light)) {
      ::carla_server::TrafficLight* new_traffic_light = 
          ::google::protobuf::Arena::CreateMessage< ::carla_server::TrafficLight >(
          GetArenaNoVirtual());
      new_traffic_light->CopyFrom(*traffic_light);
      traffic_light = new_traffic_light;
    }
    set_has_traffic_light();
    agent_.traffic_light_ = traffic_light;
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Agent.traffic_light)
}
 ::carla_server::TrafficLight* Agent::unsafe_arena_release_traffic_light() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Agent.traffic_light)
  if (has_traffic_light()) {
    clear_has_agent();
    ::carla_server::TrafficLight* temp = agent_.traffic_light_;
    agent_.traffic_light_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Agent::unsafe_arena_set_allocated_traffic_light(::carla_server::TrafficLight* traffic_light) {
  clear_agent();
  if (traffic_light) {
    set_has_traffic_light();
    agent_.traffic_light_ = traffic_light;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Agent.traffic_light)
}

// .carla_server.SpeedLimitSign speed_limit_sign = 5;
bool Agent::has_speed_limit_sign() const {
  return agent_case() == kSpeedLimitSign;
}
void Agent::set_has_speed_limit_sign() {
  _oneof_case_[0] = kSpeedLimitSign;
}
void Agent::clear_speed_limit_sign() {
  if (has_speed_limit_sign()) {
    if (GetArenaNoVirtual() == NULL) {
      delete agent_.speed_limit_sign_;
    }
    clear_has_agent();
  }
}
 const ::carla_server::SpeedLimitSign& Agent::speed_limit_sign() const {
  // @@protoc_insertion_point(field_get:carla_server.Agent.speed_limit_sign)
  return has_speed_limit_sign()
      ? *agent_.speed_limit_sign_
      : ::carla_server::SpeedLimitSign::default_instance();
}
::carla_server::SpeedLimitSign* Agent::mutable_speed_limit_sign() {
  if (!has_speed_limit_sign()) {
    clear_agent();
    set_has_speed_limit_sign();
    agent_.speed_limit_sign_ = 
      ::google::protobuf::Arena::CreateMessage< ::carla_server::SpeedLimitSign >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Agent.speed_limit_sign)
  return agent_.speed_limit_sign_;
}
::carla_server::SpeedLimitSign* Agent::release_speed_limit_sign() {
  // @@protoc_insertion_point(field_release:carla_server.Agent.speed_limit_sign)
  if (has_speed_limit_sign()) {
    clear_has_agent();
    if (GetArenaNoVirtual() != NULL) {
      ::carla_server::SpeedLimitSign* temp = new ::carla_server::SpeedLimitSign(*agent_.speed_limit_sign_);
      agent_.speed_limit_sign_ = NULL;
      return temp;
    } else {
      ::carla_server::SpeedLimitSign* temp = agent_.speed_limit_sign_;
      agent_.speed_limit_sign_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
void Agent::set_allocated_speed_limit_sign(::carla_server::SpeedLimitSign* speed_limit_sign) {
  clear_agent();
  if (speed_limit_sign) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(speed_limit_sign) == NULL) {
      GetArenaNoVirtual()->Own(speed_limit_sign);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(speed_limit_sign)) {
      ::carla_server::SpeedLimitSign* new_speed_limit_sign = 
          ::google::protobuf::Arena::CreateMessage< ::carla_server::SpeedLimitSign >(
          GetArenaNoVirtual());
      new_speed_limit_sign->CopyFrom(*speed_limit_sign);
      speed_limit_sign = new_speed_limit_sign;
    }
    set_has_speed_limit_sign();
    agent_.speed_limit_sign_ = speed_limit_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Agent.speed_limit_sign)
}
 ::carla_server::SpeedLimitSign* Agent::unsafe_arena_release_speed_limit_sign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Agent.speed_limit_sign)
  if (has_speed_limit_sign()) {
    clear_has_agent();
    ::carla_server::SpeedLimitSign* temp = agent_.speed_limit_sign_;
    agent_.speed_limit_sign_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Agent::unsafe_arena_set_allocated_speed_limit_sign(::carla_server::SpeedLimitSign* speed_limit_sign) {
  clear_agent();
  if (speed_limit_sign) {
    set_has_speed_limit_sign();
    agent_.speed_limit_sign_ = speed_limit_sign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Agent.speed_limit_sign)
}

bool Agent::has_agent() const {
  return agent_case() != AGENT_NOT_SET;
}
void Agent::clear_has_agent() {
  _oneof_case_[0] = AGENT_NOT_SET;
}
Agent::AgentCase Agent::agent_case() const {
  return Agent::AgentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestNewEpisode::kIniFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestNewEpisode::RequestNewEpisode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.RequestNewEpisode)
}
RequestNewEpisode::RequestNewEpisode(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.RequestNewEpisode)
}
RequestNewEpisode::RequestNewEpisode(const RequestNewEpisode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ini_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ini_file().size() > 0) {
    ini_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ini_file(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:carla_server.RequestNewEpisode)
}

void RequestNewEpisode::SharedCtor() {
  ini_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RequestNewEpisode::~RequestNewEpisode() {
  // @@protoc_insertion_point(destructor:carla_server.RequestNewEpisode)
  SharedDtor();
}

void RequestNewEpisode::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ini_file_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void RequestNewEpisode::ArenaDtor(void* object) {
  RequestNewEpisode* _this = reinterpret_cast< RequestNewEpisode* >(object);
  (void)_this;
}
void RequestNewEpisode::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RequestNewEpisode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestNewEpisode::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestNewEpisode& RequestNewEpisode::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestNewEpisode* RequestNewEpisode::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RequestNewEpisode>(arena);
}

void RequestNewEpisode::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.RequestNewEpisode)
  ini_file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool RequestNewEpisode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.RequestNewEpisode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ini_file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ini_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ini_file().data(), this->ini_file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "carla_server.RequestNewEpisode.ini_file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.RequestNewEpisode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.RequestNewEpisode)
  return false;
#undef DO_
}

void RequestNewEpisode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.RequestNewEpisode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ini_file = 1;
  if (this->ini_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ini_file().data(), this->ini_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carla_server.RequestNewEpisode.ini_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ini_file(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.RequestNewEpisode)
}

::google::protobuf::uint8* RequestNewEpisode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.RequestNewEpisode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ini_file = 1;
  if (this->ini_file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ini_file().data(), this->ini_file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "carla_server.RequestNewEpisode.ini_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ini_file(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.RequestNewEpisode)
  return target;
}

size_t RequestNewEpisode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.RequestNewEpisode)
  size_t total_size = 0;

  // string ini_file = 1;
  if (this->ini_file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ini_file());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestNewEpisode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.RequestNewEpisode)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestNewEpisode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestNewEpisode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.RequestNewEpisode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.RequestNewEpisode)
    MergeFrom(*source);
  }
}

void RequestNewEpisode::MergeFrom(const RequestNewEpisode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.RequestNewEpisode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ini_file().size() > 0) {
    set_ini_file(from.ini_file());
  }
}

void RequestNewEpisode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.RequestNewEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestNewEpisode::CopyFrom(const RequestNewEpisode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.RequestNewEpisode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestNewEpisode::IsInitialized() const {
  return true;
}

void RequestNewEpisode::Swap(RequestNewEpisode* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RequestNewEpisode* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RequestNewEpisode::UnsafeArenaSwap(RequestNewEpisode* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RequestNewEpisode::InternalSwap(RequestNewEpisode* other) {
  ini_file_.Swap(&other->ini_file_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestNewEpisode::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestNewEpisode

// string ini_file = 1;
void RequestNewEpisode::clear_ini_file() {
  ini_file_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RequestNewEpisode::ini_file() const {
  // @@protoc_insertion_point(field_get:carla_server.RequestNewEpisode.ini_file)
  return ini_file_.Get();
}
void RequestNewEpisode::set_ini_file(const ::std::string& value) {
  
  ini_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:carla_server.RequestNewEpisode.ini_file)
}
void RequestNewEpisode::set_ini_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ini_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:carla_server.RequestNewEpisode.ini_file)
}
void RequestNewEpisode::set_ini_file(const char* value,
    size_t size) {
  
  ini_file_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:carla_server.RequestNewEpisode.ini_file)
}
::std::string* RequestNewEpisode::mutable_ini_file() {
  
  // @@protoc_insertion_point(field_mutable:carla_server.RequestNewEpisode.ini_file)
  return ini_file_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RequestNewEpisode::release_ini_file() {
  // @@protoc_insertion_point(field_release:carla_server.RequestNewEpisode.ini_file)
  
  return ini_file_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RequestNewEpisode::unsafe_arena_release_ini_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.RequestNewEpisode.ini_file)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ini_file_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RequestNewEpisode::set_allocated_ini_file(::std::string* ini_file) {
  if (ini_file != NULL) {
    
  } else {
    
  }
  ini_file_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ini_file,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:carla_server.RequestNewEpisode.ini_file)
}
void RequestNewEpisode::unsafe_arena_set_allocated_ini_file(
    ::std::string* ini_file) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ini_file != NULL) {
    
  } else {
    
  }
  ini_file_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ini_file, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.RequestNewEpisode.ini_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneDescription::kPlayerStartSpotsFieldNumber;
const int SceneDescription::kSensorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneDescription::SceneDescription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.SceneDescription)
}
SceneDescription::SceneDescription(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  player_start_spots_(arena),
  sensors_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.SceneDescription)
}
SceneDescription::SceneDescription(const SceneDescription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_start_spots_(from.player_start_spots_),
      sensors_(from.sensors_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:carla_server.SceneDescription)
}

void SceneDescription::SharedCtor() {
  _cached_size_ = 0;
}

SceneDescription::~SceneDescription() {
  // @@protoc_insertion_point(destructor:carla_server.SceneDescription)
  SharedDtor();
}

void SceneDescription::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void SceneDescription::ArenaDtor(void* object) {
  SceneDescription* _this = reinterpret_cast< SceneDescription* >(object);
  (void)_this;
}
void SceneDescription::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SceneDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneDescription::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneDescription& SceneDescription::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneDescription* SceneDescription::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SceneDescription>(arena);
}

void SceneDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.SceneDescription)
  player_start_spots_.Clear();
  sensors_.Clear();
}

bool SceneDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.SceneDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .carla_server.Transform player_start_spots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_start_spots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .carla_server.Sensor sensors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.SceneDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.SceneDescription)
  return false;
#undef DO_
}

void SceneDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.SceneDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .carla_server.Transform player_start_spots = 1;
  for (unsigned int i = 0, n = this->player_start_spots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_start_spots(i), output);
  }

  // repeated .carla_server.Sensor sensors = 2;
  for (unsigned int i = 0, n = this->sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sensors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.SceneDescription)
}

::google::protobuf::uint8* SceneDescription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.SceneDescription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .carla_server.Transform player_start_spots = 1;
  for (unsigned int i = 0, n = this->player_start_spots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->player_start_spots(i), deterministic, target);
  }

  // repeated .carla_server.Sensor sensors = 2;
  for (unsigned int i = 0, n = this->sensors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sensors(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.SceneDescription)
  return target;
}

size_t SceneDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.SceneDescription)
  size_t total_size = 0;

  // repeated .carla_server.Transform player_start_spots = 1;
  {
    unsigned int count = this->player_start_spots_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_start_spots(i));
    }
  }

  // repeated .carla_server.Sensor sensors = 2;
  {
    unsigned int count = this->sensors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensors(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneDescription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.SceneDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneDescription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneDescription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.SceneDescription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.SceneDescription)
    MergeFrom(*source);
  }
}

void SceneDescription::MergeFrom(const SceneDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.SceneDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_start_spots_.MergeFrom(from.player_start_spots_);
  sensors_.MergeFrom(from.sensors_);
}

void SceneDescription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.SceneDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneDescription::CopyFrom(const SceneDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.SceneDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneDescription::IsInitialized() const {
  return true;
}

void SceneDescription::Swap(SceneDescription* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SceneDescription* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SceneDescription::UnsafeArenaSwap(SceneDescription* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SceneDescription::InternalSwap(SceneDescription* other) {
  player_start_spots_.InternalSwap(&other->player_start_spots_);
  sensors_.InternalSwap(&other->sensors_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneDescription::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneDescription

// repeated .carla_server.Transform player_start_spots = 1;
int SceneDescription::player_start_spots_size() const {
  return player_start_spots_.size();
}
void SceneDescription::clear_player_start_spots() {
  player_start_spots_.Clear();
}
const ::carla_server::Transform& SceneDescription::player_start_spots(int index) const {
  // @@protoc_insertion_point(field_get:carla_server.SceneDescription.player_start_spots)
  return player_start_spots_.Get(index);
}
::carla_server::Transform* SceneDescription::mutable_player_start_spots(int index) {
  // @@protoc_insertion_point(field_mutable:carla_server.SceneDescription.player_start_spots)
  return player_start_spots_.Mutable(index);
}
::carla_server::Transform* SceneDescription::add_player_start_spots() {
  // @@protoc_insertion_point(field_add:carla_server.SceneDescription.player_start_spots)
  return player_start_spots_.Add();
}
::google::protobuf::RepeatedPtrField< ::carla_server::Transform >*
SceneDescription::mutable_player_start_spots() {
  // @@protoc_insertion_point(field_mutable_list:carla_server.SceneDescription.player_start_spots)
  return &player_start_spots_;
}
const ::google::protobuf::RepeatedPtrField< ::carla_server::Transform >&
SceneDescription::player_start_spots() const {
  // @@protoc_insertion_point(field_list:carla_server.SceneDescription.player_start_spots)
  return player_start_spots_;
}

// repeated .carla_server.Sensor sensors = 2;
int SceneDescription::sensors_size() const {
  return sensors_.size();
}
void SceneDescription::clear_sensors() {
  sensors_.Clear();
}
const ::carla_server::Sensor& SceneDescription::sensors(int index) const {
  // @@protoc_insertion_point(field_get:carla_server.SceneDescription.sensors)
  return sensors_.Get(index);
}
::carla_server::Sensor* SceneDescription::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:carla_server.SceneDescription.sensors)
  return sensors_.Mutable(index);
}
::carla_server::Sensor* SceneDescription::add_sensors() {
  // @@protoc_insertion_point(field_add:carla_server.SceneDescription.sensors)
  return sensors_.Add();
}
::google::protobuf::RepeatedPtrField< ::carla_server::Sensor >*
SceneDescription::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:carla_server.SceneDescription.sensors)
  return &sensors_;
}
const ::google::protobuf::RepeatedPtrField< ::carla_server::Sensor >&
SceneDescription::sensors() const {
  // @@protoc_insertion_point(field_list:carla_server.SceneDescription.sensors)
  return sensors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpisodeStart::kPlayerStartSpotIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpisodeStart::EpisodeStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.EpisodeStart)
}
EpisodeStart::EpisodeStart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.EpisodeStart)
}
EpisodeStart::EpisodeStart(const EpisodeStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_start_spot_index_ = from.player_start_spot_index_;
  // @@protoc_insertion_point(copy_constructor:carla_server.EpisodeStart)
}

void EpisodeStart::SharedCtor() {
  player_start_spot_index_ = 0u;
  _cached_size_ = 0;
}

EpisodeStart::~EpisodeStart() {
  // @@protoc_insertion_point(destructor:carla_server.EpisodeStart)
  SharedDtor();
}

void EpisodeStart::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void EpisodeStart::ArenaDtor(void* object) {
  EpisodeStart* _this = reinterpret_cast< EpisodeStart* >(object);
  (void)_this;
}
void EpisodeStart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EpisodeStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpisodeStart::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EpisodeStart& EpisodeStart::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

EpisodeStart* EpisodeStart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EpisodeStart>(arena);
}

void EpisodeStart::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.EpisodeStart)
  player_start_spot_index_ = 0u;
}

bool EpisodeStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.EpisodeStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_start_spot_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_start_spot_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.EpisodeStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.EpisodeStart)
  return false;
#undef DO_
}

void EpisodeStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.EpisodeStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_start_spot_index = 1;
  if (this->player_start_spot_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_start_spot_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.EpisodeStart)
}

::google::protobuf::uint8* EpisodeStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.EpisodeStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_start_spot_index = 1;
  if (this->player_start_spot_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_start_spot_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.EpisodeStart)
  return target;
}

size_t EpisodeStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.EpisodeStart)
  size_t total_size = 0;

  // uint32 player_start_spot_index = 1;
  if (this->player_start_spot_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_start_spot_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpisodeStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.EpisodeStart)
  GOOGLE_DCHECK_NE(&from, this);
  const EpisodeStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpisodeStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.EpisodeStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.EpisodeStart)
    MergeFrom(*source);
  }
}

void EpisodeStart::MergeFrom(const EpisodeStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.EpisodeStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_start_spot_index() != 0) {
    set_player_start_spot_index(from.player_start_spot_index());
  }
}

void EpisodeStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.EpisodeStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpisodeStart::CopyFrom(const EpisodeStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.EpisodeStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpisodeStart::IsInitialized() const {
  return true;
}

void EpisodeStart::Swap(EpisodeStart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EpisodeStart* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EpisodeStart::UnsafeArenaSwap(EpisodeStart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EpisodeStart::InternalSwap(EpisodeStart* other) {
  std::swap(player_start_spot_index_, other->player_start_spot_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EpisodeStart::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EpisodeStart

// uint32 player_start_spot_index = 1;
void EpisodeStart::clear_player_start_spot_index() {
  player_start_spot_index_ = 0u;
}
::google::protobuf::uint32 EpisodeStart::player_start_spot_index() const {
  // @@protoc_insertion_point(field_get:carla_server.EpisodeStart.player_start_spot_index)
  return player_start_spot_index_;
}
void EpisodeStart::set_player_start_spot_index(::google::protobuf::uint32 value) {
  
  player_start_spot_index_ = value;
  // @@protoc_insertion_point(field_set:carla_server.EpisodeStart.player_start_spot_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpisodeReady::kReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpisodeReady::EpisodeReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.EpisodeReady)
}
EpisodeReady::EpisodeReady(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.EpisodeReady)
}
EpisodeReady::EpisodeReady(const EpisodeReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:carla_server.EpisodeReady)
}

void EpisodeReady::SharedCtor() {
  ready_ = false;
  _cached_size_ = 0;
}

EpisodeReady::~EpisodeReady() {
  // @@protoc_insertion_point(destructor:carla_server.EpisodeReady)
  SharedDtor();
}

void EpisodeReady::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void EpisodeReady::ArenaDtor(void* object) {
  EpisodeReady* _this = reinterpret_cast< EpisodeReady* >(object);
  (void)_this;
}
void EpisodeReady::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EpisodeReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpisodeReady::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EpisodeReady& EpisodeReady::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

EpisodeReady* EpisodeReady::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EpisodeReady>(arena);
}

void EpisodeReady::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.EpisodeReady)
  ready_ = false;
}

bool EpisodeReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.EpisodeReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ready = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.EpisodeReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.EpisodeReady)
  return false;
#undef DO_
}

void EpisodeReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.EpisodeReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.EpisodeReady)
}

::google::protobuf::uint8* EpisodeReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.EpisodeReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ready(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.EpisodeReady)
  return target;
}

size_t EpisodeReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.EpisodeReady)
  size_t total_size = 0;

  // bool ready = 1;
  if (this->ready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpisodeReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.EpisodeReady)
  GOOGLE_DCHECK_NE(&from, this);
  const EpisodeReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpisodeReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.EpisodeReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.EpisodeReady)
    MergeFrom(*source);
  }
}

void EpisodeReady::MergeFrom(const EpisodeReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.EpisodeReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ready() != 0) {
    set_ready(from.ready());
  }
}

void EpisodeReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.EpisodeReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpisodeReady::CopyFrom(const EpisodeReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.EpisodeReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpisodeReady::IsInitialized() const {
  return true;
}

void EpisodeReady::Swap(EpisodeReady* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EpisodeReady* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EpisodeReady::UnsafeArenaSwap(EpisodeReady* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EpisodeReady::InternalSwap(EpisodeReady* other) {
  std::swap(ready_, other->ready_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EpisodeReady::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EpisodeReady

// bool ready = 1;
void EpisodeReady::clear_ready() {
  ready_ = false;
}
bool EpisodeReady::ready() const {
  // @@protoc_insertion_point(field_get:carla_server.EpisodeReady.ready)
  return ready_;
}
void EpisodeReady::set_ready(bool value) {
  
  ready_ = value;
  // @@protoc_insertion_point(field_set:carla_server.EpisodeReady.ready)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control::kSteerFieldNumber;
const int Control::kThrottleFieldNumber;
const int Control::kBrakeFieldNumber;
const int Control::kHandBrakeFieldNumber;
const int Control::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control::Control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Control)
}
Control::Control(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Control)
}
Control::Control(const Control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steer_, &from.steer_,
    reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&steer_) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:carla_server.Control)
}

void Control::SharedCtor() {
  ::memset(&steer_, 0, reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&steer_) + sizeof(reverse_));
  _cached_size_ = 0;
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:carla_server.Control)
  SharedDtor();
}

void Control::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Control::ArenaDtor(void* object) {
  Control* _this = reinterpret_cast< Control* >(object);
  (void)_this;
}
void Control::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Control& Control::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control* Control::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Control>(arena);
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Control)
  ::memset(&steer_, 0, reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&steer_) + sizeof(reverse_));
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float steer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float throttle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brake = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hand_brake = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hand_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reverse = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Control)
  return false;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float steer = 1;
  if (this->steer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->steer(), output);
  }

  // float throttle = 2;
  if (this->throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->throttle(), output);
  }

  // float brake = 3;
  if (this->brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->brake(), output);
  }

  // bool hand_brake = 4;
  if (this->hand_brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hand_brake(), output);
  }

  // bool reverse = 5;
  if (this->reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reverse(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Control)
}

::google::protobuf::uint8* Control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Control)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float steer = 1;
  if (this->steer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->steer(), target);
  }

  // float throttle = 2;
  if (this->throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->throttle(), target);
  }

  // float brake = 3;
  if (this->brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->brake(), target);
  }

  // bool hand_brake = 4;
  if (this->hand_brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hand_brake(), target);
  }

  // bool reverse = 5;
  if (this->reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reverse(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Control)
  size_t total_size = 0;

  // float steer = 1;
  if (this->steer() != 0) {
    total_size += 1 + 4;
  }

  // float throttle = 2;
  if (this->throttle() != 0) {
    total_size += 1 + 4;
  }

  // float brake = 3;
  if (this->brake() != 0) {
    total_size += 1 + 4;
  }

  // bool hand_brake = 4;
  if (this->hand_brake() != 0) {
    total_size += 1 + 1;
  }

  // bool reverse = 5;
  if (this->reverse() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Control)
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.steer() != 0) {
    set_steer(from.steer());
  }
  if (from.throttle() != 0) {
    set_throttle(from.throttle());
  }
  if (from.brake() != 0) {
    set_brake(from.brake());
  }
  if (from.hand_brake() != 0) {
    set_hand_brake(from.hand_brake());
  }
  if (from.reverse() != 0) {
    set_reverse(from.reverse());
  }
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::Swap(Control* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Control* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Control::UnsafeArenaSwap(Control* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Control::InternalSwap(Control* other) {
  std::swap(steer_, other->steer_);
  std::swap(throttle_, other->throttle_);
  std::swap(brake_, other->brake_);
  std::swap(hand_brake_, other->hand_brake_);
  std::swap(reverse_, other->reverse_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control

// float steer = 1;
void Control::clear_steer() {
  steer_ = 0;
}
float Control::steer() const {
  // @@protoc_insertion_point(field_get:carla_server.Control.steer)
  return steer_;
}
void Control::set_steer(float value) {
  
  steer_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Control.steer)
}

// float throttle = 2;
void Control::clear_throttle() {
  throttle_ = 0;
}
float Control::throttle() const {
  // @@protoc_insertion_point(field_get:carla_server.Control.throttle)
  return throttle_;
}
void Control::set_throttle(float value) {
  
  throttle_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Control.throttle)
}

// float brake = 3;
void Control::clear_brake() {
  brake_ = 0;
}
float Control::brake() const {
  // @@protoc_insertion_point(field_get:carla_server.Control.brake)
  return brake_;
}
void Control::set_brake(float value) {
  
  brake_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Control.brake)
}

// bool hand_brake = 4;
void Control::clear_hand_brake() {
  hand_brake_ = false;
}
bool Control::hand_brake() const {
  // @@protoc_insertion_point(field_get:carla_server.Control.hand_brake)
  return hand_brake_;
}
void Control::set_hand_brake(bool value) {
  
  hand_brake_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Control.hand_brake)
}

// bool reverse = 5;
void Control::clear_reverse() {
  reverse_ = false;
}
bool Control::reverse() const {
  // @@protoc_insertion_point(field_get:carla_server.Control.reverse)
  return reverse_;
}
void Control::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Control.reverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Measurements_PlayerMeasurements::_slow_mutable_transform() {
  transform_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
      GetArenaNoVirtual());
}
::carla_server::Transform* Measurements_PlayerMeasurements::_slow_release_transform() {
  if (transform_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Transform* temp = new ::carla_server::Transform(*transform_);
    transform_ = NULL;
    return temp;
  }
}
::carla_server::Transform* Measurements_PlayerMeasurements::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Measurements.PlayerMeasurements.transform)
  
  ::carla_server::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
void Measurements_PlayerMeasurements::_slow_set_allocated_transform(
    ::google::protobuf::Arena* message_arena, ::carla_server::Transform** transform) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*transform) == NULL) {
      message_arena->Own(*transform);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*transform)) {
      ::carla_server::Transform* new_transform = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Transform >(
            message_arena);
      new_transform->CopyFrom(**transform);
      *transform = new_transform;
    }
}
void Measurements_PlayerMeasurements::unsafe_arena_set_allocated_transform(
    ::carla_server::Transform* transform) {
  if (GetArenaNoVirtual() == NULL) {
    delete transform_;
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Measurements.PlayerMeasurements.transform)
}
void Measurements_PlayerMeasurements::_slow_mutable_bounding_box() {
  bounding_box_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::BoundingBox >(
      GetArenaNoVirtual());
}
::carla_server::BoundingBox* Measurements_PlayerMeasurements::_slow_release_bounding_box() {
  if (bounding_box_ == NULL) {
    return NULL;
  } else {
    ::carla_server::BoundingBox* temp = new ::carla_server::BoundingBox(*bounding_box_);
    bounding_box_ = NULL;
    return temp;
  }
}
::carla_server::BoundingBox* Measurements_PlayerMeasurements::unsafe_arena_release_bounding_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Measurements.PlayerMeasurements.bounding_box)
  
  ::carla_server::BoundingBox* temp = bounding_box_;
  bounding_box_ = NULL;
  return temp;
}
void Measurements_PlayerMeasurements::_slow_set_allocated_bounding_box(
    ::google::protobuf::Arena* message_arena, ::carla_server::BoundingBox** bounding_box) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*bounding_box) == NULL) {
      message_arena->Own(*bounding_box);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*bounding_box)) {
      ::carla_server::BoundingBox* new_bounding_box = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::BoundingBox >(
            message_arena);
      new_bounding_box->CopyFrom(**bounding_box);
      *bounding_box = new_bounding_box;
    }
}
void Measurements_PlayerMeasurements::unsafe_arena_set_allocated_bounding_box(
    ::carla_server::BoundingBox* bounding_box) {
  if (GetArenaNoVirtual() == NULL) {
    delete bounding_box_;
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Measurements.PlayerMeasurements.bounding_box)
}
void Measurements_PlayerMeasurements::_slow_mutable_acceleration() {
  acceleration_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Vector3D >(
      GetArenaNoVirtual());
}
::carla_server::Vector3D* Measurements_PlayerMeasurements::_slow_release_acceleration() {
  if (acceleration_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Vector3D* temp = new ::carla_server::Vector3D(*acceleration_);
    acceleration_ = NULL;
    return temp;
  }
}
::carla_server::Vector3D* Measurements_PlayerMeasurements::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Measurements.PlayerMeasurements.acceleration)
  
  ::carla_server::Vector3D* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void Measurements_PlayerMeasurements::_slow_set_allocated_acceleration(
    ::google::protobuf::Arena* message_arena, ::carla_server::Vector3D** acceleration) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*acceleration) == NULL) {
      message_arena->Own(*acceleration);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*acceleration)) {
      ::carla_server::Vector3D* new_acceleration = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Vector3D >(
            message_arena);
      new_acceleration->CopyFrom(**acceleration);
      *acceleration = new_acceleration;
    }
}
void Measurements_PlayerMeasurements::unsafe_arena_set_allocated_acceleration(
    ::carla_server::Vector3D* acceleration) {
  if (GetArenaNoVirtual() == NULL) {
    delete acceleration_;
  }
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Measurements.PlayerMeasurements.acceleration)
}
void Measurements_PlayerMeasurements::_slow_mutable_autopilot_control() {
  autopilot_control_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Control >(
      GetArenaNoVirtual());
}
::carla_server::Control* Measurements_PlayerMeasurements::_slow_release_autopilot_control() {
  if (autopilot_control_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Control* temp = new ::carla_server::Control(*autopilot_control_);
    autopilot_control_ = NULL;
    return temp;
  }
}
::carla_server::Control* Measurements_PlayerMeasurements::unsafe_arena_release_autopilot_control() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Measurements.PlayerMeasurements.autopilot_control)
  
  ::carla_server::Control* temp = autopilot_control_;
  autopilot_control_ = NULL;
  return temp;
}
void Measurements_PlayerMeasurements::_slow_set_allocated_autopilot_control(
    ::google::protobuf::Arena* message_arena, ::carla_server::Control** autopilot_control) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*autopilot_control) == NULL) {
      message_arena->Own(*autopilot_control);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*autopilot_control)) {
      ::carla_server::Control* new_autopilot_control = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Control >(
            message_arena);
      new_autopilot_control->CopyFrom(**autopilot_control);
      *autopilot_control = new_autopilot_control;
    }
}
void Measurements_PlayerMeasurements::unsafe_arena_set_allocated_autopilot_control(
    ::carla_server::Control* autopilot_control) {
  if (GetArenaNoVirtual() == NULL) {
    delete autopilot_control_;
  }
  autopilot_control_ = autopilot_control;
  if (autopilot_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Measurements.PlayerMeasurements.autopilot_control)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurements_PlayerMeasurements::kTransformFieldNumber;
const int Measurements_PlayerMeasurements::kBoundingBoxFieldNumber;
const int Measurements_PlayerMeasurements::kAccelerationFieldNumber;
const int Measurements_PlayerMeasurements::kForwardSpeedFieldNumber;
const int Measurements_PlayerMeasurements::kCollisionVehiclesFieldNumber;
const int Measurements_PlayerMeasurements::kCollisionPedestriansFieldNumber;
const int Measurements_PlayerMeasurements::kCollisionOtherFieldNumber;
const int Measurements_PlayerMeasurements::kIntersectionOtherlaneFieldNumber;
const int Measurements_PlayerMeasurements::kIntersectionOffroadFieldNumber;
const int Measurements_PlayerMeasurements::kAutopilotControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurements_PlayerMeasurements::Measurements_PlayerMeasurements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Measurements.PlayerMeasurements)
}
Measurements_PlayerMeasurements::Measurements_PlayerMeasurements(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Measurements.PlayerMeasurements)
}
Measurements_PlayerMeasurements::Measurements_PlayerMeasurements(const Measurements_PlayerMeasurements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transform()) {
    transform_ = new ::carla_server::Transform(*from.transform_);
  } else {
    transform_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::carla_server::Vector3D(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_autopilot_control()) {
    autopilot_control_ = new ::carla_server::Control(*from.autopilot_control_);
  } else {
    autopilot_control_ = NULL;
  }
  if (from.has_bounding_box()) {
    bounding_box_ = new ::carla_server::BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = NULL;
  }
  ::memcpy(&forward_speed_, &from.forward_speed_,
    reinterpret_cast<char*>(&intersection_offroad_) -
    reinterpret_cast<char*>(&forward_speed_) + sizeof(intersection_offroad_));
  // @@protoc_insertion_point(copy_constructor:carla_server.Measurements.PlayerMeasurements)
}

void Measurements_PlayerMeasurements::SharedCtor() {
  ::memset(&transform_, 0, reinterpret_cast<char*>(&intersection_offroad_) -
    reinterpret_cast<char*>(&transform_) + sizeof(intersection_offroad_));
  _cached_size_ = 0;
}

Measurements_PlayerMeasurements::~Measurements_PlayerMeasurements() {
  // @@protoc_insertion_point(destructor:carla_server.Measurements.PlayerMeasurements)
  SharedDtor();
}

void Measurements_PlayerMeasurements::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete transform_;
  }
  if (this != internal_default_instance()) {
    delete acceleration_;
  }
  if (this != internal_default_instance()) {
    delete autopilot_control_;
  }
  if (this != internal_default_instance()) {
    delete bounding_box_;
  }
}

void Measurements_PlayerMeasurements::ArenaDtor(void* object) {
  Measurements_PlayerMeasurements* _this = reinterpret_cast< Measurements_PlayerMeasurements* >(object);
  (void)_this;
}
void Measurements_PlayerMeasurements::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Measurements_PlayerMeasurements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measurements_PlayerMeasurements::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Measurements_PlayerMeasurements& Measurements_PlayerMeasurements::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Measurements_PlayerMeasurements* Measurements_PlayerMeasurements::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Measurements_PlayerMeasurements>(arena);
}

void Measurements_PlayerMeasurements::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Measurements.PlayerMeasurements)
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && autopilot_control_ != NULL) {
    delete autopilot_control_;
  }
  autopilot_control_ = NULL;
  if (GetArenaNoVirtual() == NULL && bounding_box_ != NULL) {
    delete bounding_box_;
  }
  bounding_box_ = NULL;
  ::memset(&forward_speed_, 0, reinterpret_cast<char*>(&intersection_offroad_) -
    reinterpret_cast<char*>(&forward_speed_) + sizeof(intersection_offroad_));
}

bool Measurements_PlayerMeasurements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Measurements.PlayerMeasurements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .carla_server.Transform transform = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Vector3D acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float forward_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collision_vehicles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_vehicles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collision_pedestrians = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_pedestrians_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collision_other = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_other_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intersection_otherlane = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intersection_otherlane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float intersection_offroad = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intersection_offroad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Control autopilot_control = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_autopilot_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.BoundingBox bounding_box = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Measurements.PlayerMeasurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Measurements.PlayerMeasurements)
  return false;
#undef DO_
}

void Measurements_PlayerMeasurements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Measurements.PlayerMeasurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->transform_, output);
  }

  // .carla_server.Vector3D acceleration = 3;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->acceleration_, output);
  }

  // float forward_speed = 4;
  if (this->forward_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->forward_speed(), output);
  }

  // float collision_vehicles = 5;
  if (this->collision_vehicles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->collision_vehicles(), output);
  }

  // float collision_pedestrians = 6;
  if (this->collision_pedestrians() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->collision_pedestrians(), output);
  }

  // float collision_other = 7;
  if (this->collision_other() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->collision_other(), output);
  }

  // float intersection_otherlane = 8;
  if (this->intersection_otherlane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->intersection_otherlane(), output);
  }

  // float intersection_offroad = 9;
  if (this->intersection_offroad() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->intersection_offroad(), output);
  }

  // .carla_server.Control autopilot_control = 10;
  if (this->has_autopilot_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->autopilot_control_, output);
  }

  // .carla_server.BoundingBox bounding_box = 12;
  if (this->has_bounding_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->bounding_box_, output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Measurements.PlayerMeasurements)
}

::google::protobuf::uint8* Measurements_PlayerMeasurements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Measurements.PlayerMeasurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->transform_, deterministic, target);
  }

  // .carla_server.Vector3D acceleration = 3;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->acceleration_, deterministic, target);
  }

  // float forward_speed = 4;
  if (this->forward_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->forward_speed(), target);
  }

  // float collision_vehicles = 5;
  if (this->collision_vehicles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->collision_vehicles(), target);
  }

  // float collision_pedestrians = 6;
  if (this->collision_pedestrians() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->collision_pedestrians(), target);
  }

  // float collision_other = 7;
  if (this->collision_other() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->collision_other(), target);
  }

  // float intersection_otherlane = 8;
  if (this->intersection_otherlane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->intersection_otherlane(), target);
  }

  // float intersection_offroad = 9;
  if (this->intersection_offroad() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->intersection_offroad(), target);
  }

  // .carla_server.Control autopilot_control = 10;
  if (this->has_autopilot_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->autopilot_control_, deterministic, target);
  }

  // .carla_server.BoundingBox bounding_box = 12;
  if (this->has_bounding_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->bounding_box_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Measurements.PlayerMeasurements)
  return target;
}

size_t Measurements_PlayerMeasurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Measurements.PlayerMeasurements)
  size_t total_size = 0;

  // .carla_server.Transform transform = 1;
  if (this->has_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transform_);
  }

  // .carla_server.Vector3D acceleration = 3;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_);
  }

  // .carla_server.Control autopilot_control = 10;
  if (this->has_autopilot_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->autopilot_control_);
  }

  // .carla_server.BoundingBox bounding_box = 12;
  if (this->has_bounding_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bounding_box_);
  }

  // float forward_speed = 4;
  if (this->forward_speed() != 0) {
    total_size += 1 + 4;
  }

  // float collision_vehicles = 5;
  if (this->collision_vehicles() != 0) {
    total_size += 1 + 4;
  }

  // float collision_pedestrians = 6;
  if (this->collision_pedestrians() != 0) {
    total_size += 1 + 4;
  }

  // float collision_other = 7;
  if (this->collision_other() != 0) {
    total_size += 1 + 4;
  }

  // float intersection_otherlane = 8;
  if (this->intersection_otherlane() != 0) {
    total_size += 1 + 4;
  }

  // float intersection_offroad = 9;
  if (this->intersection_offroad() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measurements_PlayerMeasurements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Measurements.PlayerMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurements_PlayerMeasurements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measurements_PlayerMeasurements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Measurements.PlayerMeasurements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Measurements.PlayerMeasurements)
    MergeFrom(*source);
  }
}

void Measurements_PlayerMeasurements::MergeFrom(const Measurements_PlayerMeasurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Measurements.PlayerMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    mutable_transform()->::carla_server::Transform::MergeFrom(from.transform());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::carla_server::Vector3D::MergeFrom(from.acceleration());
  }
  if (from.has_autopilot_control()) {
    mutable_autopilot_control()->::carla_server::Control::MergeFrom(from.autopilot_control());
  }
  if (from.has_bounding_box()) {
    mutable_bounding_box()->::carla_server::BoundingBox::MergeFrom(from.bounding_box());
  }
  if (from.forward_speed() != 0) {
    set_forward_speed(from.forward_speed());
  }
  if (from.collision_vehicles() != 0) {
    set_collision_vehicles(from.collision_vehicles());
  }
  if (from.collision_pedestrians() != 0) {
    set_collision_pedestrians(from.collision_pedestrians());
  }
  if (from.collision_other() != 0) {
    set_collision_other(from.collision_other());
  }
  if (from.intersection_otherlane() != 0) {
    set_intersection_otherlane(from.intersection_otherlane());
  }
  if (from.intersection_offroad() != 0) {
    set_intersection_offroad(from.intersection_offroad());
  }
}

void Measurements_PlayerMeasurements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Measurements.PlayerMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurements_PlayerMeasurements::CopyFrom(const Measurements_PlayerMeasurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Measurements.PlayerMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurements_PlayerMeasurements::IsInitialized() const {
  return true;
}

void Measurements_PlayerMeasurements::Swap(Measurements_PlayerMeasurements* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Measurements_PlayerMeasurements* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Measurements_PlayerMeasurements::UnsafeArenaSwap(Measurements_PlayerMeasurements* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Measurements_PlayerMeasurements::InternalSwap(Measurements_PlayerMeasurements* other) {
  std::swap(transform_, other->transform_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(autopilot_control_, other->autopilot_control_);
  std::swap(bounding_box_, other->bounding_box_);
  std::swap(forward_speed_, other->forward_speed_);
  std::swap(collision_vehicles_, other->collision_vehicles_);
  std::swap(collision_pedestrians_, other->collision_pedestrians_);
  std::swap(collision_other_, other->collision_other_);
  std::swap(intersection_otherlane_, other->intersection_otherlane_);
  std::swap(intersection_offroad_, other->intersection_offroad_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Measurements_PlayerMeasurements::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Measurements_PlayerMeasurements

// .carla_server.Transform transform = 1;
bool Measurements_PlayerMeasurements::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
void Measurements_PlayerMeasurements::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
const ::carla_server::Transform& Measurements_PlayerMeasurements::transform() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.transform)
  return transform_ != NULL ? *transform_
                         : *::carla_server::Transform::internal_default_instance();
}
::carla_server::Transform* Measurements_PlayerMeasurements::mutable_transform() {
  
  if (transform_ == NULL) {
    _slow_mutable_transform();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Measurements.PlayerMeasurements.transform)
  return transform_;
}
::carla_server::Transform* Measurements_PlayerMeasurements::release_transform() {
  // @@protoc_insertion_point(field_release:carla_server.Measurements.PlayerMeasurements.transform)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_transform();
  } else {
    ::carla_server::Transform* temp = transform_;
    transform_ = NULL;
    return temp;
  }
}
 void Measurements_PlayerMeasurements::set_allocated_transform(::carla_server::Transform* transform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_;
  }
  if (transform != NULL) {
    _slow_set_allocated_transform(message_arena, &transform);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Measurements.PlayerMeasurements.transform)
}

// .carla_server.BoundingBox bounding_box = 12;
bool Measurements_PlayerMeasurements::has_bounding_box() const {
  return this != internal_default_instance() && bounding_box_ != NULL;
}
void Measurements_PlayerMeasurements::clear_bounding_box() {
  if (GetArenaNoVirtual() == NULL && bounding_box_ != NULL) delete bounding_box_;
  bounding_box_ = NULL;
}
const ::carla_server::BoundingBox& Measurements_PlayerMeasurements::bounding_box() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.bounding_box)
  return bounding_box_ != NULL ? *bounding_box_
                         : *::carla_server::BoundingBox::internal_default_instance();
}
::carla_server::BoundingBox* Measurements_PlayerMeasurements::mutable_bounding_box() {
  
  if (bounding_box_ == NULL) {
    _slow_mutable_bounding_box();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Measurements.PlayerMeasurements.bounding_box)
  return bounding_box_;
}
::carla_server::BoundingBox* Measurements_PlayerMeasurements::release_bounding_box() {
  // @@protoc_insertion_point(field_release:carla_server.Measurements.PlayerMeasurements.bounding_box)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_bounding_box();
  } else {
    ::carla_server::BoundingBox* temp = bounding_box_;
    bounding_box_ = NULL;
    return temp;
  }
}
 void Measurements_PlayerMeasurements::set_allocated_bounding_box(::carla_server::BoundingBox* bounding_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bounding_box_;
  }
  if (bounding_box != NULL) {
    _slow_set_allocated_bounding_box(message_arena, &bounding_box);
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Measurements.PlayerMeasurements.bounding_box)
}

// .carla_server.Vector3D acceleration = 3;
bool Measurements_PlayerMeasurements::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
void Measurements_PlayerMeasurements::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) delete acceleration_;
  acceleration_ = NULL;
}
const ::carla_server::Vector3D& Measurements_PlayerMeasurements::acceleration() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::carla_server::Vector3D::internal_default_instance();
}
::carla_server::Vector3D* Measurements_PlayerMeasurements::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    _slow_mutable_acceleration();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Measurements.PlayerMeasurements.acceleration)
  return acceleration_;
}
::carla_server::Vector3D* Measurements_PlayerMeasurements::release_acceleration() {
  // @@protoc_insertion_point(field_release:carla_server.Measurements.PlayerMeasurements.acceleration)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_acceleration();
  } else {
    ::carla_server::Vector3D* temp = acceleration_;
    acceleration_ = NULL;
    return temp;
  }
}
 void Measurements_PlayerMeasurements::set_allocated_acceleration(::carla_server::Vector3D* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acceleration_;
  }
  if (acceleration != NULL) {
    _slow_set_allocated_acceleration(message_arena, &acceleration);
  }
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Measurements.PlayerMeasurements.acceleration)
}

// float forward_speed = 4;
void Measurements_PlayerMeasurements::clear_forward_speed() {
  forward_speed_ = 0;
}
float Measurements_PlayerMeasurements::forward_speed() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.forward_speed)
  return forward_speed_;
}
void Measurements_PlayerMeasurements::set_forward_speed(float value) {
  
  forward_speed_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.PlayerMeasurements.forward_speed)
}

// float collision_vehicles = 5;
void Measurements_PlayerMeasurements::clear_collision_vehicles() {
  collision_vehicles_ = 0;
}
float Measurements_PlayerMeasurements::collision_vehicles() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.collision_vehicles)
  return collision_vehicles_;
}
void Measurements_PlayerMeasurements::set_collision_vehicles(float value) {
  
  collision_vehicles_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.PlayerMeasurements.collision_vehicles)
}

// float collision_pedestrians = 6;
void Measurements_PlayerMeasurements::clear_collision_pedestrians() {
  collision_pedestrians_ = 0;
}
float Measurements_PlayerMeasurements::collision_pedestrians() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.collision_pedestrians)
  return collision_pedestrians_;
}
void Measurements_PlayerMeasurements::set_collision_pedestrians(float value) {
  
  collision_pedestrians_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.PlayerMeasurements.collision_pedestrians)
}

// float collision_other = 7;
void Measurements_PlayerMeasurements::clear_collision_other() {
  collision_other_ = 0;
}
float Measurements_PlayerMeasurements::collision_other() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.collision_other)
  return collision_other_;
}
void Measurements_PlayerMeasurements::set_collision_other(float value) {
  
  collision_other_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.PlayerMeasurements.collision_other)
}

// float intersection_otherlane = 8;
void Measurements_PlayerMeasurements::clear_intersection_otherlane() {
  intersection_otherlane_ = 0;
}
float Measurements_PlayerMeasurements::intersection_otherlane() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.intersection_otherlane)
  return intersection_otherlane_;
}
void Measurements_PlayerMeasurements::set_intersection_otherlane(float value) {
  
  intersection_otherlane_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.PlayerMeasurements.intersection_otherlane)
}

// float intersection_offroad = 9;
void Measurements_PlayerMeasurements::clear_intersection_offroad() {
  intersection_offroad_ = 0;
}
float Measurements_PlayerMeasurements::intersection_offroad() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.intersection_offroad)
  return intersection_offroad_;
}
void Measurements_PlayerMeasurements::set_intersection_offroad(float value) {
  
  intersection_offroad_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.PlayerMeasurements.intersection_offroad)
}

// .carla_server.Control autopilot_control = 10;
bool Measurements_PlayerMeasurements::has_autopilot_control() const {
  return this != internal_default_instance() && autopilot_control_ != NULL;
}
void Measurements_PlayerMeasurements::clear_autopilot_control() {
  if (GetArenaNoVirtual() == NULL && autopilot_control_ != NULL) delete autopilot_control_;
  autopilot_control_ = NULL;
}
const ::carla_server::Control& Measurements_PlayerMeasurements::autopilot_control() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.PlayerMeasurements.autopilot_control)
  return autopilot_control_ != NULL ? *autopilot_control_
                         : *::carla_server::Control::internal_default_instance();
}
::carla_server::Control* Measurements_PlayerMeasurements::mutable_autopilot_control() {
  
  if (autopilot_control_ == NULL) {
    _slow_mutable_autopilot_control();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Measurements.PlayerMeasurements.autopilot_control)
  return autopilot_control_;
}
::carla_server::Control* Measurements_PlayerMeasurements::release_autopilot_control() {
  // @@protoc_insertion_point(field_release:carla_server.Measurements.PlayerMeasurements.autopilot_control)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_autopilot_control();
  } else {
    ::carla_server::Control* temp = autopilot_control_;
    autopilot_control_ = NULL;
    return temp;
  }
}
 void Measurements_PlayerMeasurements::set_allocated_autopilot_control(::carla_server::Control* autopilot_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete autopilot_control_;
  }
  if (autopilot_control != NULL) {
    _slow_set_allocated_autopilot_control(message_arena, &autopilot_control);
  }
  autopilot_control_ = autopilot_control;
  if (autopilot_control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Measurements.PlayerMeasurements.autopilot_control)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Measurements::_slow_mutable_player_measurements() {
  player_measurements_ = ::google::protobuf::Arena::CreateMessage< ::carla_server::Measurements_PlayerMeasurements >(
      GetArenaNoVirtual());
}
::carla_server::Measurements_PlayerMeasurements* Measurements::_slow_release_player_measurements() {
  if (player_measurements_ == NULL) {
    return NULL;
  } else {
    ::carla_server::Measurements_PlayerMeasurements* temp = new ::carla_server::Measurements_PlayerMeasurements(*player_measurements_);
    player_measurements_ = NULL;
    return temp;
  }
}
::carla_server::Measurements_PlayerMeasurements* Measurements::unsafe_arena_release_player_measurements() {
  // @@protoc_insertion_point(field_unsafe_arena_release:carla_server.Measurements.player_measurements)
  
  ::carla_server::Measurements_PlayerMeasurements* temp = player_measurements_;
  player_measurements_ = NULL;
  return temp;
}
void Measurements::_slow_set_allocated_player_measurements(
    ::google::protobuf::Arena* message_arena, ::carla_server::Measurements_PlayerMeasurements** player_measurements) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*player_measurements) == NULL) {
      message_arena->Own(*player_measurements);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*player_measurements)) {
      ::carla_server::Measurements_PlayerMeasurements* new_player_measurements = 
            ::google::protobuf::Arena::CreateMessage< ::carla_server::Measurements_PlayerMeasurements >(
            message_arena);
      new_player_measurements->CopyFrom(**player_measurements);
      *player_measurements = new_player_measurements;
    }
}
void Measurements::unsafe_arena_set_allocated_player_measurements(
    ::carla_server::Measurements_PlayerMeasurements* player_measurements) {
  if (GetArenaNoVirtual() == NULL) {
    delete player_measurements_;
  }
  player_measurements_ = player_measurements;
  if (player_measurements) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:carla_server.Measurements.player_measurements)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurements::kFrameNumberFieldNumber;
const int Measurements::kPlatformTimestampFieldNumber;
const int Measurements::kGameTimestampFieldNumber;
const int Measurements::kPlayerMeasurementsFieldNumber;
const int Measurements::kNonPlayerAgentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurements::Measurements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_carla_5fserver_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:carla_server.Measurements)
}
Measurements::Measurements(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  non_player_agents_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_carla_5fserver_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:carla_server.Measurements)
}
Measurements::Measurements(const Measurements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      non_player_agents_(from.non_player_agents_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_measurements()) {
    player_measurements_ = new ::carla_server::Measurements_PlayerMeasurements(*from.player_measurements_);
  } else {
    player_measurements_ = NULL;
  }
  ::memcpy(&platform_timestamp_, &from.platform_timestamp_,
    reinterpret_cast<char*>(&frame_number_) -
    reinterpret_cast<char*>(&platform_timestamp_) + sizeof(frame_number_));
  // @@protoc_insertion_point(copy_constructor:carla_server.Measurements)
}

void Measurements::SharedCtor() {
  ::memset(&player_measurements_, 0, reinterpret_cast<char*>(&frame_number_) -
    reinterpret_cast<char*>(&player_measurements_) + sizeof(frame_number_));
  _cached_size_ = 0;
}

Measurements::~Measurements() {
  // @@protoc_insertion_point(destructor:carla_server.Measurements)
  SharedDtor();
}

void Measurements::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete player_measurements_;
  }
}

void Measurements::ArenaDtor(void* object) {
  Measurements* _this = reinterpret_cast< Measurements* >(object);
  (void)_this;
}
void Measurements::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Measurements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measurements::descriptor() {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Measurements& Measurements::default_instance() {
  protobuf_carla_5fserver_2eproto::InitDefaults();
  return *internal_default_instance();
}

Measurements* Measurements::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Measurements>(arena);
}

void Measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:carla_server.Measurements)
  non_player_agents_.Clear();
  if (GetArenaNoVirtual() == NULL && player_measurements_ != NULL) {
    delete player_measurements_;
  }
  player_measurements_ = NULL;
  ::memset(&platform_timestamp_, 0, reinterpret_cast<char*>(&frame_number_) -
    reinterpret_cast<char*>(&platform_timestamp_) + sizeof(frame_number_));
}

bool Measurements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:carla_server.Measurements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 platform_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .carla_server.Measurements.PlayerMeasurements player_measurements = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .carla_server.Agent non_player_agents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_non_player_agents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frame_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:carla_server.Measurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:carla_server.Measurements)
  return false;
#undef DO_
}

void Measurements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:carla_server.Measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 platform_timestamp = 1;
  if (this->platform_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->platform_timestamp(), output);
  }

  // uint32 game_timestamp = 2;
  if (this->game_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_timestamp(), output);
  }

  // .carla_server.Measurements.PlayerMeasurements player_measurements = 3;
  if (this->has_player_measurements()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->player_measurements_, output);
  }

  // repeated .carla_server.Agent non_player_agents = 4;
  for (unsigned int i = 0, n = this->non_player_agents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->non_player_agents(i), output);
  }

  // uint64 frame_number = 5;
  if (this->frame_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->frame_number(), output);
  }

  // @@protoc_insertion_point(serialize_end:carla_server.Measurements)
}

::google::protobuf::uint8* Measurements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:carla_server.Measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 platform_timestamp = 1;
  if (this->platform_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->platform_timestamp(), target);
  }

  // uint32 game_timestamp = 2;
  if (this->game_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_timestamp(), target);
  }

  // .carla_server.Measurements.PlayerMeasurements player_measurements = 3;
  if (this->has_player_measurements()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->player_measurements_, deterministic, target);
  }

  // repeated .carla_server.Agent non_player_agents = 4;
  for (unsigned int i = 0, n = this->non_player_agents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->non_player_agents(i), deterministic, target);
  }

  // uint64 frame_number = 5;
  if (this->frame_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->frame_number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:carla_server.Measurements)
  return target;
}

size_t Measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:carla_server.Measurements)
  size_t total_size = 0;

  // repeated .carla_server.Agent non_player_agents = 4;
  {
    unsigned int count = this->non_player_agents_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->non_player_agents(i));
    }
  }

  // .carla_server.Measurements.PlayerMeasurements player_measurements = 3;
  if (this->has_player_measurements()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_measurements_);
  }

  // uint32 platform_timestamp = 1;
  if (this->platform_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->platform_timestamp());
  }

  // uint32 game_timestamp = 2;
  if (this->game_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_timestamp());
  }

  // uint64 frame_number = 5;
  if (this->frame_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frame_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measurements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:carla_server.Measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measurements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:carla_server.Measurements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:carla_server.Measurements)
    MergeFrom(*source);
  }
}

void Measurements::MergeFrom(const Measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:carla_server.Measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  non_player_agents_.MergeFrom(from.non_player_agents_);
  if (from.has_player_measurements()) {
    mutable_player_measurements()->::carla_server::Measurements_PlayerMeasurements::MergeFrom(from.player_measurements());
  }
  if (from.platform_timestamp() != 0) {
    set_platform_timestamp(from.platform_timestamp());
  }
  if (from.game_timestamp() != 0) {
    set_game_timestamp(from.game_timestamp());
  }
  if (from.frame_number() != 0) {
    set_frame_number(from.frame_number());
  }
}

void Measurements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:carla_server.Measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurements::CopyFrom(const Measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:carla_server.Measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurements::IsInitialized() const {
  return true;
}

void Measurements::Swap(Measurements* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Measurements* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Measurements::UnsafeArenaSwap(Measurements* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Measurements::InternalSwap(Measurements* other) {
  non_player_agents_.InternalSwap(&other->non_player_agents_);
  std::swap(player_measurements_, other->player_measurements_);
  std::swap(platform_timestamp_, other->platform_timestamp_);
  std::swap(game_timestamp_, other->game_timestamp_);
  std::swap(frame_number_, other->frame_number_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Measurements::GetMetadata() const {
  protobuf_carla_5fserver_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_carla_5fserver_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Measurements

// uint64 frame_number = 5;
void Measurements::clear_frame_number() {
  frame_number_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Measurements::frame_number() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.frame_number)
  return frame_number_;
}
void Measurements::set_frame_number(::google::protobuf::uint64 value) {
  
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.frame_number)
}

// uint32 platform_timestamp = 1;
void Measurements::clear_platform_timestamp() {
  platform_timestamp_ = 0u;
}
::google::protobuf::uint32 Measurements::platform_timestamp() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.platform_timestamp)
  return platform_timestamp_;
}
void Measurements::set_platform_timestamp(::google::protobuf::uint32 value) {
  
  platform_timestamp_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.platform_timestamp)
}

// uint32 game_timestamp = 2;
void Measurements::clear_game_timestamp() {
  game_timestamp_ = 0u;
}
::google::protobuf::uint32 Measurements::game_timestamp() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.game_timestamp)
  return game_timestamp_;
}
void Measurements::set_game_timestamp(::google::protobuf::uint32 value) {
  
  game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:carla_server.Measurements.game_timestamp)
}

// .carla_server.Measurements.PlayerMeasurements player_measurements = 3;
bool Measurements::has_player_measurements() const {
  return this != internal_default_instance() && player_measurements_ != NULL;
}
void Measurements::clear_player_measurements() {
  if (GetArenaNoVirtual() == NULL && player_measurements_ != NULL) delete player_measurements_;
  player_measurements_ = NULL;
}
const ::carla_server::Measurements_PlayerMeasurements& Measurements::player_measurements() const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.player_measurements)
  return player_measurements_ != NULL ? *player_measurements_
                         : *::carla_server::Measurements_PlayerMeasurements::internal_default_instance();
}
::carla_server::Measurements_PlayerMeasurements* Measurements::mutable_player_measurements() {
  
  if (player_measurements_ == NULL) {
    _slow_mutable_player_measurements();
  }
  // @@protoc_insertion_point(field_mutable:carla_server.Measurements.player_measurements)
  return player_measurements_;
}
::carla_server::Measurements_PlayerMeasurements* Measurements::release_player_measurements() {
  // @@protoc_insertion_point(field_release:carla_server.Measurements.player_measurements)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_player_measurements();
  } else {
    ::carla_server::Measurements_PlayerMeasurements* temp = player_measurements_;
    player_measurements_ = NULL;
    return temp;
  }
}
 void Measurements::set_allocated_player_measurements(::carla_server::Measurements_PlayerMeasurements* player_measurements) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete player_measurements_;
  }
  if (player_measurements != NULL) {
    _slow_set_allocated_player_measurements(message_arena, &player_measurements);
  }
  player_measurements_ = player_measurements;
  if (player_measurements) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:carla_server.Measurements.player_measurements)
}

// repeated .carla_server.Agent non_player_agents = 4;
int Measurements::non_player_agents_size() const {
  return non_player_agents_.size();
}
void Measurements::clear_non_player_agents() {
  non_player_agents_.Clear();
}
const ::carla_server::Agent& Measurements::non_player_agents(int index) const {
  // @@protoc_insertion_point(field_get:carla_server.Measurements.non_player_agents)
  return non_player_agents_.Get(index);
}
::carla_server::Agent* Measurements::mutable_non_player_agents(int index) {
  // @@protoc_insertion_point(field_mutable:carla_server.Measurements.non_player_agents)
  return non_player_agents_.Mutable(index);
}
::carla_server::Agent* Measurements::add_non_player_agents() {
  // @@protoc_insertion_point(field_add:carla_server.Measurements.non_player_agents)
  return non_player_agents_.Add();
}
::google::protobuf::RepeatedPtrField< ::carla_server::Agent >*
Measurements::mutable_non_player_agents() {
  // @@protoc_insertion_point(field_mutable_list:carla_server.Measurements.non_player_agents)
  return &non_player_agents_;
}
const ::google::protobuf::RepeatedPtrField< ::carla_server::Agent >&
Measurements::non_player_agents() const {
  // @@protoc_insertion_point(field_list:carla_server.Measurements.non_player_agents)
  return non_player_agents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace carla_server

// @@protoc_insertion_point(global_scope)
