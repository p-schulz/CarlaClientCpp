// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/map_lite_unittest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "google/protobuf/map_lite_unittest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace protobuf_unittest {

void protobuf_ShutdownFile_google_2fprotobuf_2fmap_5flite_5funittest_2eproto() {
  delete MapLite::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MapLite::default_instance_ = new MapLite();
  MapLite::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_google_2fprotobuf_2fmap_5flite_5funittest_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto_once_);
void protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto_once_,
                 &protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_google_2fprotobuf_2fmap_5flite_5funittest_2eproto {
  StaticDescriptorInitializer_google_2fprotobuf_2fmap_5flite_5funittest_2eproto() {
    protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto();
  }
} static_descriptor_initializer_google_2fprotobuf_2fmap_5flite_5funittest_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MapLite::kMapFieldFieldNumber;
#endif  // !_MSC_VER

MapLite::MapLite()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf_unittest.MapLite)
}

void MapLite::InitAsDefaultInstance() {
}

MapLite::MapLite(const MapLite& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf_unittest.MapLite)
}

void MapLite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapLite::~MapLite() {
  // @@protoc_insertion_point(destructor:protobuf_unittest.MapLite)
  SharedDtor();
}

void MapLite::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapLite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapLite& MapLite::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_google_2fprotobuf_2fmap_5flite_5funittest_2eproto();
#endif
  return *default_instance_;
}

MapLite* MapLite::default_instance_ = NULL;

MapLite* MapLite::New(::google::protobuf::Arena* arena) const {
  MapLite* n = new MapLite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapLite::Clear() {
  map_field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MapLite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:protobuf_unittest.MapLite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, int32> map_field = 1;
      case 1: {
        if (tag == 10) {
         parse_map_field:
          ::google::protobuf::scoped_ptr<MapLite_MapFieldEntry> entry(map_field_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_map_field())[entry->key()] = *entry->mutable_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_map_field;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf_unittest.MapLite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf_unittest.MapLite)
  return false;
#undef DO_
}

void MapLite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf_unittest.MapLite)
  // map<int32, int32> map_field = 1;
  {
    ::google::protobuf::scoped_ptr<MapLite_MapFieldEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = map_field().begin(); it != map_field().end(); ++it) {
      entry.reset(map_field_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
          1, *entry, output);
    }
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:protobuf_unittest.MapLite)
}

int MapLite::ByteSize() const {
  int total_size = 0;

  // map<int32, int32> map_field = 1;
  total_size += 1 * this->map_field_size();
  {
    ::google::protobuf::scoped_ptr<MapLite_MapFieldEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >::const_iterator
        it = map_field().begin(); it != map_field().end(); ++it) {
      entry.reset(map_field_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapLite::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapLite*>(&from));
}

void MapLite::MergeFrom(const MapLite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  map_field_.MergeFrom(from.map_field_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MapLite::CopyFrom(const MapLite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLite::IsInitialized() const {

  return true;
}

void MapLite::Swap(MapLite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapLite::InternalSwap(MapLite* other) {
  map_field_.Swap(&other->map_field_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MapLite::GetTypeName() const {
  return "protobuf_unittest.MapLite";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_unittest

// @@protoc_insertion_point(global_scope)
